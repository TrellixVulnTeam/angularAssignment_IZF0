/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { PaginationActionType as T } from './actions';
import { contextSelectors } from './selectors';
import { defaultPaginationContextState, defaultPaginationState, } from './state';
/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function paginationContextReducer(state = defaultPaginationContextState, action) {
    switch (action.type) {
        case T.RESET_PAGINATION_STATE:
            return defaultPaginationContextState;
        case T.GET_NEXT_PAGE:
            return Object.assign({}, state, { loadingNewPage: true, progressionCancelled: false });
        case T.GET_NEXT_PAGE_SUCCESS:
            return Object.assign({}, state, { loadingNewPage: false, pages: [...state.pages, action.entityIds], currentPage: state.progressionCancelled
                    ? state.currentPage
                    : state.currentPage + 1, done: action.done, progressionCancelled: false });
        case T.GET_NEXT_PAGE_EMPTY:
            /** @type {?} */
            const isFirstFetchedPage = (state.pages.length === 0);
            return Object.assign({}, state, { loadingNewPage: false, pages: isFirstFetchedPage ? [[]] : [...state.pages], currentPage: state.progressionCancelled && !isFirstFetchedPage
                    ? state.currentPage
                    : state.currentPage + 1, done: true, progressionCancelled: false });
        case T.PREV_PAGE:
            return Object.assign({}, state, { currentPage: state.currentPage - 1, progressionCancelled: contextSelectors.nextPageLoading(state) });
        case T.NEXT_PAGE:
            return Object.assign({}, state, { currentPage: state.currentPage + 1 });
        default:
            return state;
    }
}
/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function paginationReducer(state = defaultPaginationState, action) {
    if (!action || !action.type.startsWith('[mb-Pagination]')) {
        return state;
    }
    return Object.assign({}, state, { contexts: Object.assign({}, state.contexts, { [action.contextId]: paginationContextReducer(state.contexts[action.contextId], action) }) });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkdWNlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ncngtZGF0YS1wYWdpbmF0aW9uLyIsInNvdXJjZXMiOlsibGliL3BhZ2luYXRpb24vc3RvcmUvcmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFvQixvQkFBb0IsSUFBSSxDQUFDLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQy9DLE9BQU8sRUFDTCw2QkFBNkIsRUFDN0Isc0JBQXNCLEdBR3ZCLE1BQU0sU0FBUyxDQUFDOzs7Ozs7QUFFakIsTUFBTSxVQUFVLHdCQUF3QixDQUN0QyxRQUFnQyw2QkFBNkIsRUFDN0QsTUFBd0I7SUFFeEIsUUFBUSxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQ25CLEtBQUssQ0FBQyxDQUFDLHNCQUFzQjtZQUMzQixPQUFPLDZCQUE2QixDQUFDO1FBRXZDLEtBQUssQ0FBQyxDQUFDLGFBQWE7WUFDbEIseUJBQ0ssS0FBSyxJQUNSLGNBQWMsRUFBRSxJQUFJLEVBQ3BCLG9CQUFvQixFQUFFLEtBQUssSUFDM0I7UUFFSixLQUFLLENBQUMsQ0FBQyxxQkFBcUI7WUFDMUIseUJBQ0ssS0FBSyxJQUNSLGNBQWMsRUFBRSxLQUFLLEVBQ3JCLEtBQUssRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsU0FBUyxDQUFDLEVBQ3pDLFdBQVcsRUFBRSxLQUFLLENBQUMsb0JBQW9CO29CQUNyQyxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVc7b0JBQ25CLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLENBQUMsRUFDekIsSUFBSSxFQUFFLE1BQU0sQ0FBQyxJQUFJLEVBQ2pCLG9CQUFvQixFQUFFLEtBQUssSUFDM0I7UUFFSixLQUFLLENBQUMsQ0FBQyxtQkFBbUI7O2tCQUNsQixrQkFBa0IsR0FBRyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUMsQ0FBQztZQUNyRCx5QkFDSyxLQUFLLElBQ1IsY0FBYyxFQUFFLEtBQUssRUFDckIsS0FBSyxFQUFFLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUNuRCxXQUFXLEVBQUUsS0FBSyxDQUFDLG9CQUFvQixJQUFJLENBQUMsa0JBQWtCO29CQUM1RCxDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVc7b0JBQ25CLENBQUMsQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLENBQUMsRUFDekIsSUFBSSxFQUFFLElBQUksRUFDVixvQkFBb0IsRUFBRSxLQUFLLElBQzNCO1FBRUosS0FBSyxDQUFDLENBQUMsU0FBUztZQUNkLHlCQUNLLEtBQUssSUFDUixXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVcsR0FBRyxDQUFDLEVBR2xDLG9CQUFvQixFQUFFLGdCQUFnQixDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsSUFDN0Q7UUFFSixLQUFLLENBQUMsQ0FBQyxTQUFTO1lBQ2QseUJBQ0ssS0FBSyxJQUNSLFdBQVcsRUFBRSxLQUFLLENBQUMsV0FBVyxHQUFHLENBQUMsSUFDbEM7UUFFSjtZQUNFLE9BQU8sS0FBSyxDQUFDO0tBQ2hCO0FBQ0gsQ0FBQzs7Ozs7O0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUMvQixRQUF5QixzQkFBc0IsRUFDL0MsTUFBd0I7SUFFeEIsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLGlCQUFpQixDQUFDLEVBQUU7UUFDekQsT0FBTyxLQUFLLENBQUM7S0FDZDtJQUVELHlCQUNLLEtBQUssSUFDUixRQUFRLG9CQUNILEtBQUssQ0FBQyxRQUFRLElBQ2pCLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxFQUFFLHdCQUF3QixDQUMxQyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFDaEMsTUFBTSxDQUNQLE9BRUg7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnaW5hdGlvbkFjdGlvbiwgUGFnaW5hdGlvbkFjdGlvblR5cGUgYXMgVCB9IGZyb20gJy4vYWN0aW9ucyc7XG5pbXBvcnQgeyBjb250ZXh0U2VsZWN0b3JzIH0gZnJvbSAnLi9zZWxlY3RvcnMnO1xuaW1wb3J0IHtcbiAgZGVmYXVsdFBhZ2luYXRpb25Db250ZXh0U3RhdGUsXG4gIGRlZmF1bHRQYWdpbmF0aW9uU3RhdGUsXG4gIFBhZ2luYXRpb25Db250ZXh0U3RhdGUsXG4gIFBhZ2luYXRpb25TdGF0ZSxcbn0gZnJvbSAnLi9zdGF0ZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWdpbmF0aW9uQ29udGV4dFJlZHVjZXIoXG4gIHN0YXRlOiBQYWdpbmF0aW9uQ29udGV4dFN0YXRlID0gZGVmYXVsdFBhZ2luYXRpb25Db250ZXh0U3RhdGUsXG4gIGFjdGlvbjogUGFnaW5hdGlvbkFjdGlvbixcbik6IFBhZ2luYXRpb25Db250ZXh0U3RhdGUge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBULlJFU0VUX1BBR0lOQVRJT05fU1RBVEU6XG4gICAgICByZXR1cm4gZGVmYXVsdFBhZ2luYXRpb25Db250ZXh0U3RhdGU7XG5cbiAgICBjYXNlIFQuR0VUX05FWFRfUEFHRTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBsb2FkaW5nTmV3UGFnZTogdHJ1ZSxcbiAgICAgICAgcHJvZ3Jlc3Npb25DYW5jZWxsZWQ6IGZhbHNlLFxuICAgICAgfTtcblxuICAgIGNhc2UgVC5HRVRfTkVYVF9QQUdFX1NVQ0NFU1M6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgbG9hZGluZ05ld1BhZ2U6IGZhbHNlLFxuICAgICAgICBwYWdlczogWy4uLnN0YXRlLnBhZ2VzLCBhY3Rpb24uZW50aXR5SWRzXSxcbiAgICAgICAgY3VycmVudFBhZ2U6IHN0YXRlLnByb2dyZXNzaW9uQ2FuY2VsbGVkXG4gICAgICAgICAgPyBzdGF0ZS5jdXJyZW50UGFnZVxuICAgICAgICAgIDogc3RhdGUuY3VycmVudFBhZ2UgKyAxLFxuICAgICAgICBkb25lOiBhY3Rpb24uZG9uZSxcbiAgICAgICAgcHJvZ3Jlc3Npb25DYW5jZWxsZWQ6IGZhbHNlLFxuICAgICAgfTtcblxuICAgIGNhc2UgVC5HRVRfTkVYVF9QQUdFX0VNUFRZOlxuICAgICAgY29uc3QgaXNGaXJzdEZldGNoZWRQYWdlID0gKHN0YXRlLnBhZ2VzLmxlbmd0aCA9PT0gMCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgbG9hZGluZ05ld1BhZ2U6IGZhbHNlLFxuICAgICAgICBwYWdlczogaXNGaXJzdEZldGNoZWRQYWdlID8gW1tdXSA6IFsuLi5zdGF0ZS5wYWdlc10sXG4gICAgICAgIGN1cnJlbnRQYWdlOiBzdGF0ZS5wcm9ncmVzc2lvbkNhbmNlbGxlZCAmJiAhaXNGaXJzdEZldGNoZWRQYWdlXG4gICAgICAgICAgPyBzdGF0ZS5jdXJyZW50UGFnZVxuICAgICAgICAgIDogc3RhdGUuY3VycmVudFBhZ2UgKyAxLFxuICAgICAgICBkb25lOiB0cnVlLFxuICAgICAgICBwcm9ncmVzc2lvbkNhbmNlbGxlZDogZmFsc2UsXG4gICAgICB9O1xuXG4gICAgY2FzZSBULlBSRVZfUEFHRTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBjdXJyZW50UGFnZTogc3RhdGUuY3VycmVudFBhZ2UgLSAxLFxuICAgICAgICAvLyBJZiB0aGUgbmV4dCBwYWdlIGlzIGxvYWRpbmcgd2hlbiB0aGUgdXNlciBnb2VzIGJhY2ssXG4gICAgICAgIC8vIGRvbid0IHByb2dyZXNzIHRoZSBwYWdlIG51bWJlciB3aGVuIHRoZSBwYWdlIGNvbWVzIGluXG4gICAgICAgIHByb2dyZXNzaW9uQ2FuY2VsbGVkOiBjb250ZXh0U2VsZWN0b3JzLm5leHRQYWdlTG9hZGluZyhzdGF0ZSksXG4gICAgICB9O1xuXG4gICAgY2FzZSBULk5FWFRfUEFHRTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBjdXJyZW50UGFnZTogc3RhdGUuY3VycmVudFBhZ2UgKyAxLFxuICAgICAgfTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhZ2luYXRpb25SZWR1Y2VyKFxuICBzdGF0ZTogUGFnaW5hdGlvblN0YXRlID0gZGVmYXVsdFBhZ2luYXRpb25TdGF0ZSxcbiAgYWN0aW9uOiBQYWdpbmF0aW9uQWN0aW9uLFxuKTogUGFnaW5hdGlvblN0YXRlIHtcbiAgaWYgKCFhY3Rpb24gfHwgIWFjdGlvbi50eXBlLnN0YXJ0c1dpdGgoJ1ttYi1QYWdpbmF0aW9uXScpKSB7XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5zdGF0ZSxcbiAgICBjb250ZXh0czoge1xuICAgICAgLi4uc3RhdGUuY29udGV4dHMsXG4gICAgICBbYWN0aW9uLmNvbnRleHRJZF06IHBhZ2luYXRpb25Db250ZXh0UmVkdWNlcihcbiAgICAgICAgc3RhdGUuY29udGV4dHNbYWN0aW9uLmNvbnRleHRJZF0sXG4gICAgICAgIGFjdGlvbixcbiAgICAgICksXG4gICAgfSxcbiAgfTtcbn1cbiJdfQ==