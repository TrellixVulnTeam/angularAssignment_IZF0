/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { createFeatureSelector, createSelector, select, } from '@ngrx/store';
import { contextSelectors } from '../../store/selectors';
import { defaultStoreKey } from './default-store-key';
/**
 * @record
 * @template Entity
 */
function AdvancedSelections() { }
if (false) {
    /** @type {?} */
    AdvancedSelections.prototype.page;
    /** @type {?} */
    AdvancedSelections.prototype.all;
}
/** @type {?} */
const mapValues = (/**
 * @template A
 * @param {?} obj
 * @param {?} f
 * @return {?}
 */
(obj, f) => {
    /** @type {?} */
    const result = {};
    for (const k of Object.keys(obj)) {
        result[k] = f(obj[k]);
    }
    return (/** @type {?} */ (result));
});
const ɵ0 = mapValues;
/**
 * Creates pagination selectors that only know about the pagination state
 * @type {?}
 */
const basicPaginationSelectors = (/**
 * @param {?} contextId
 * @return {?}
 */
(contextId) => {
    /** @type {?} */
    const paginationState = createFeatureSelector(defaultStoreKey);
    /** @type {?} */
    const contextState = createSelector(paginationState, (/**
     * @param {?} s
     * @return {?}
     */
    s => s.contexts[contextId]));
    /** @type {?} */
    const contextSelector = (/**
     * @template A
     * @param {?} f
     * @return {?}
     */
    (f) => createSelector(contextState, f));
    return mapValues(contextSelectors, contextSelector);
});
const ɵ1 = basicPaginationSelectors;
/**
 * Creates selectors that know about the entity cache
 * @type {?}
 */
const advancedPaginationSelectors = (/**
 * @template Entity
 * @param {?} basicPaginationSelectors
 * @param {?} selectEntityMap
 * @return {?}
 */
(basicPaginationSelectors, selectEntityMap) => {
    return {
        page: createSelector(basicPaginationSelectors.currentPageIds, selectEntityMap, (/**
         * @param {?} ids
         * @param {?} entityMap
         * @return {?}
         */
        (ids, entityMap) => {
            if (!ids || !entityMap) {
                return null;
            }
            return ids.reduce((/**
             * @param {?} a
             * @param {?} id
             * @return {?}
             */
            (a, id) => {
                if (id in entityMap) {
                    a.push(entityMap[id]);
                }
                return a;
            }), []);
        })),
        all: createSelector(basicPaginationSelectors.allIds, selectEntityMap, (/**
         * @param {?} allIds
         * @param {?} entityMap
         * @return {?}
         */
        (allIds, entityMap) => {
            if (!allIds || !entityMap) {
                return null;
            }
            return allIds.map((/**
             * @param {?} id
             * @return {?}
             */
            id => entityMap[id]));
        })),
    };
});
const ɵ2 = advancedPaginationSelectors;
/** @type {?} */
export const allPaginationSelectors = (/**
 * @template Entity
 * @param {?} contextId
 * @param {?} selectEntityMap
 * @return {?}
 */
(contextId, selectEntityMap) => {
    /** @type {?} */
    const basicSelectors = basicPaginationSelectors(contextId);
    /** @type {?} */
    const advancedSelectors = advancedPaginationSelectors(basicSelectors, selectEntityMap);
    return Object.assign({}, basicSelectors, advancedSelectors);
});
/** @type {?} */
export const allPaginationObservables = (/**
 * @template Entity
 * @param {?} store
 * @param {?} allSelectors
 * @return {?}
 */
(store, allSelectors) => {
    /** @type {?} */
    const sel = (/**
     * @template A
     * @param {?} selector
     * @return {?}
     */
    (selector) => store.pipe(select(selector)));
    return mapValues(allSelectors, sel);
});
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0b3JzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmdyeC1kYXRhLXBhZ2luYXRpb24vIiwic291cmNlcyI6WyJsaWIvcGFnaW5hdGlvbi9zdG9yZS1pbnRlcmZhY2VzL25ncngvc2VsZWN0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQ0wscUJBQXFCLEVBQ3JCLGNBQWMsRUFDZCxNQUFNLEdBR1AsTUFBTSxhQUFhLENBQUM7QUFFckIsT0FBTyxFQUFvQixnQkFBZ0IsRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTNFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQzs7Ozs7QUFHdEQsaUNBR0M7OztJQUZDLGtDQUFzQjs7SUFDdEIsaUNBQXFCOzs7TUErQmpCLFNBQVM7Ozs7OztBQUFHLENBQUksR0FBUSxFQUFFLENBQU0sRUFBMkIsRUFBRTs7VUFDM0QsTUFBTSxHQUFHLEVBQUU7SUFFakIsS0FBSyxNQUFNLENBQUMsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1FBQ2hDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDdkI7SUFFRCxPQUFPLG1CQUFBLE1BQU0sRUFBTyxDQUFDO0FBQ3ZCLENBQUMsQ0FBQTs7Ozs7O01BS0ssd0JBQXdCOzs7O0FBQUcsQ0FDL0IsU0FBaUIsRUFDYSxFQUFFOztVQUMxQixlQUFlLEdBQUcscUJBQXFCLENBQzNDLGVBQWUsQ0FDaEI7O1VBQ0ssWUFBWSxHQUFHLGNBQWMsQ0FDakMsZUFBZTs7OztJQUNmLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsRUFDM0I7O1VBRUssZUFBZTs7Ozs7SUFBRyxDQUFJLENBQW1DLEVBQUUsRUFBRSxDQUNqRSxjQUFjLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBRWpDLE9BQU8sU0FBUyxDQUFDLGdCQUFnQixFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQ3RELENBQUMsQ0FBQTs7Ozs7O01BS0ssMkJBQTJCOzs7Ozs7QUFBRyxDQUNsQyx3QkFBc0QsRUFDdEQsZUFBa0QsRUFDVCxFQUFFO0lBQzNDLE9BQU87UUFDTCxJQUFJLEVBQUUsY0FBYyxDQUNsQix3QkFBd0IsQ0FBQyxjQUFjLEVBQ3ZDLGVBQWU7Ozs7O1FBQ2YsQ0FBQyxHQUFHLEVBQUUsU0FBUyxFQUFFLEVBQUU7WUFDakIsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDdEIsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUNELE9BQU8sR0FBRyxDQUFDLE1BQU07Ozs7O1lBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUU7Z0JBQzFCLElBQUksRUFBRSxJQUFJLFNBQVMsRUFBRTtvQkFDbkIsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztpQkFDdkI7Z0JBQ0QsT0FBTyxDQUFDLENBQUM7WUFDWCxDQUFDLEdBQUUsRUFBRSxDQUFDLENBQUM7UUFDVCxDQUFDLEVBQ0Y7UUFDRCxHQUFHLEVBQUUsY0FBYyxDQUNqQix3QkFBd0IsQ0FBQyxNQUFNLEVBQy9CLGVBQWU7Ozs7O1FBQ2YsQ0FBQyxNQUFNLEVBQUUsU0FBUyxFQUFFLEVBQUU7WUFDcEIsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDekIsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUNELE9BQU8sTUFBTSxDQUFDLEdBQUc7Ozs7WUFBQyxFQUFFLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsRUFBQyxDQUFDO1FBQ3pDLENBQUMsRUFDRjtLQUNGLENBQUM7QUFDSixDQUFDLENBQUE7OztBQUVELE1BQU0sT0FBTyxzQkFBc0I7Ozs7OztBQUFHLENBQ3BDLFNBQWlCLEVBQ2pCLGVBQWtELEVBQ2xELEVBQUU7O1VBQ0ksY0FBYyxHQUFHLHdCQUF3QixDQUFDLFNBQVMsQ0FBQzs7VUFDcEQsaUJBQWlCLEdBQUcsMkJBQTJCLENBQ25ELGNBQWMsRUFDZCxlQUFlLENBQ2hCO0lBQ0QseUJBQ0ssY0FBYyxFQUNkLGlCQUFpQixFQUNwQjtBQUNKLENBQUMsQ0FBQTs7QUFFRCxNQUFNLE9BQU8sd0JBQXdCOzs7Ozs7QUFBRyxDQUN0QyxLQUFpQixFQUNqQixZQUFnRCxFQUNWLEVBQUU7O1VBQ2xDLEdBQUc7Ozs7O0lBQUcsQ0FBSSxRQUEwQixFQUFFLEVBQUUsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFBO0lBQzNFLE9BQU8sU0FBUyxDQUFDLFlBQVksRUFBRSxHQUFHLENBQUMsQ0FBQztBQUN0QyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaWN0aW9uYXJ5IH0gZnJvbSAnQG5ncngvZW50aXR5JztcbmltcG9ydCB7XG4gIGNyZWF0ZUZlYXR1cmVTZWxlY3RvcixcbiAgY3JlYXRlU2VsZWN0b3IsXG4gIHNlbGVjdCxcbiAgU2VsZWN0b3IsXG4gIFN0b3JlLFxufSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBDb250ZXh0U2VsZWN0b3JzLCBjb250ZXh0U2VsZWN0b3JzIH0gZnJvbSAnLi4vLi4vc3RvcmUvc2VsZWN0b3JzJztcbmltcG9ydCB7IFBhZ2luYXRpb25Db250ZXh0U3RhdGUsIFBhZ2luYXRpb25TdGF0ZSB9IGZyb20gJy4uLy4uL3N0b3JlL3N0YXRlJztcbmltcG9ydCB7IGRlZmF1bHRTdG9yZUtleSB9IGZyb20gJy4vZGVmYXVsdC1zdG9yZS1rZXknO1xuXG4vLyBUaGVzZSBzZWxlY3Rpb25zIHJlcXVpcmUga25vd2xlZGdlIG9mIHRoZSBlbnRpdHkgY2FjaGVcbmludGVyZmFjZSBBZHZhbmNlZFNlbGVjdGlvbnM8RW50aXR5PiB7XG4gIHBhZ2U6IEVudGl0eVtdIHwgbnVsbDtcbiAgYWxsOiBFbnRpdHlbXSB8IG51bGw7XG59XG5cbmV4cG9ydCB0eXBlIEJhc2ljTmdyeFBhZ2luYXRpb25TZWxlY3RvcnMgPSB7XG4gIFtLIGluIGtleW9mIENvbnRleHRTZWxlY3RvcnNdOiBTZWxlY3RvcjxhbnksIFJldHVyblR5cGU8Q29udGV4dFNlbGVjdG9yc1tLXT4+O1xufTtcblxudHlwZSBBZHZhbmNlZE5ncnhQYWdpbmF0aW9uU2VsZWN0b3JzPEVudGl0eT4gPSB7XG4gIFtLIGluIGtleW9mIEFkdmFuY2VkU2VsZWN0aW9uczxFbnRpdHk+XTogU2VsZWN0b3I8XG4gICAgYW55LFxuICAgIEFkdmFuY2VkU2VsZWN0aW9uczxFbnRpdHk+W0tdXG4gID47XG59O1xuXG5leHBvcnQgdHlwZSBBbGxOZ3J4UGFnaW5hdGlvblNlbGVjdG9yczxFbnRpdHk+ID0gQmFzaWNOZ3J4UGFnaW5hdGlvblNlbGVjdG9ycyAmXG4gIEFkdmFuY2VkTmdyeFBhZ2luYXRpb25TZWxlY3RvcnM8RW50aXR5PjtcblxuZXhwb3J0IHR5cGUgQmFzaWNOZ3J4UGFnaW5hdGlvbk9ic2VydmFibGVzID0ge1xuICBbSyBpbiBrZXlvZiBDb250ZXh0U2VsZWN0b3JzXTogT2JzZXJ2YWJsZTxSZXR1cm5UeXBlPENvbnRleHRTZWxlY3RvcnNbS10+Pjtcbn07XG5cbnR5cGUgQWR2YW5jZWROZ3J4UGFnaW5hdGlvbk9ic2VydmFibGVzPEVudGl0eT4gPSB7XG4gIFtLIGluIGtleW9mIEFkdmFuY2VkU2VsZWN0aW9uczxFbnRpdHk+XTogT2JzZXJ2YWJsZTxcbiAgICBBZHZhbmNlZFNlbGVjdGlvbnM8RW50aXR5PltLXVxuICA+O1xufTtcblxuZXhwb3J0IHR5cGUgQWxsTmdyeFBhZ2luYXRpb25PYnNlcnZhYmxlczxcbiAgRW50aXR5XG4+ID0gQmFzaWNOZ3J4UGFnaW5hdGlvbk9ic2VydmFibGVzICYgQWR2YW5jZWROZ3J4UGFnaW5hdGlvbk9ic2VydmFibGVzPEVudGl0eT47XG5cbmNvbnN0IG1hcFZhbHVlcyA9IDxBPihvYmo6IGFueSwgZjogYW55KTogeyBbSyBpbiBrZXlvZiBBXTogYW55IH0gPT4ge1xuICBjb25zdCByZXN1bHQgPSB7fTtcblxuICBmb3IgKGNvbnN0IGsgb2YgT2JqZWN0LmtleXMob2JqKSkge1xuICAgIHJlc3VsdFtrXSA9IGYob2JqW2tdKTtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQgYXMgYW55O1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIHBhZ2luYXRpb24gc2VsZWN0b3JzIHRoYXQgb25seSBrbm93IGFib3V0IHRoZSBwYWdpbmF0aW9uIHN0YXRlXG4gKi9cbmNvbnN0IGJhc2ljUGFnaW5hdGlvblNlbGVjdG9ycyA9IChcbiAgY29udGV4dElkOiBzdHJpbmcsXG4pOiBCYXNpY05ncnhQYWdpbmF0aW9uU2VsZWN0b3JzID0+IHtcbiAgY29uc3QgcGFnaW5hdGlvblN0YXRlID0gY3JlYXRlRmVhdHVyZVNlbGVjdG9yPFBhZ2luYXRpb25TdGF0ZT4oXG4gICAgZGVmYXVsdFN0b3JlS2V5LFxuICApO1xuICBjb25zdCBjb250ZXh0U3RhdGUgPSBjcmVhdGVTZWxlY3RvcihcbiAgICBwYWdpbmF0aW9uU3RhdGUsXG4gICAgcyA9PiBzLmNvbnRleHRzW2NvbnRleHRJZF0sXG4gICk7XG5cbiAgY29uc3QgY29udGV4dFNlbGVjdG9yID0gPEE+KGY6IChzOiBQYWdpbmF0aW9uQ29udGV4dFN0YXRlKSA9PiBBKSA9PlxuICAgIGNyZWF0ZVNlbGVjdG9yKGNvbnRleHRTdGF0ZSwgZik7XG5cbiAgcmV0dXJuIG1hcFZhbHVlcyhjb250ZXh0U2VsZWN0b3JzLCBjb250ZXh0U2VsZWN0b3IpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIHNlbGVjdG9ycyB0aGF0IGtub3cgYWJvdXQgdGhlIGVudGl0eSBjYWNoZVxuICovXG5jb25zdCBhZHZhbmNlZFBhZ2luYXRpb25TZWxlY3RvcnMgPSA8RW50aXR5PihcbiAgYmFzaWNQYWdpbmF0aW9uU2VsZWN0b3JzOiBCYXNpY05ncnhQYWdpbmF0aW9uU2VsZWN0b3JzLFxuICBzZWxlY3RFbnRpdHlNYXA6IFNlbGVjdG9yPGFueSwgRGljdGlvbmFyeTxFbnRpdHk+Pixcbik6IEFkdmFuY2VkTmdyeFBhZ2luYXRpb25TZWxlY3RvcnM8RW50aXR5PiA9PiB7XG4gIHJldHVybiB7XG4gICAgcGFnZTogY3JlYXRlU2VsZWN0b3IoXG4gICAgICBiYXNpY1BhZ2luYXRpb25TZWxlY3RvcnMuY3VycmVudFBhZ2VJZHMsXG4gICAgICBzZWxlY3RFbnRpdHlNYXAsXG4gICAgICAoaWRzLCBlbnRpdHlNYXApID0+IHtcbiAgICAgICAgaWYgKCFpZHMgfHwgIWVudGl0eU1hcCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpZHMucmVkdWNlKChhLCBpZCkgPT4ge1xuICAgICAgICAgIGlmIChpZCBpbiBlbnRpdHlNYXApIHtcbiAgICAgICAgICAgIGEucHVzaChlbnRpdHlNYXBbaWRdKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIGE7XG4gICAgICAgIH0sIFtdKTtcbiAgICAgIH0sXG4gICAgKSxcbiAgICBhbGw6IGNyZWF0ZVNlbGVjdG9yKFxuICAgICAgYmFzaWNQYWdpbmF0aW9uU2VsZWN0b3JzLmFsbElkcyxcbiAgICAgIHNlbGVjdEVudGl0eU1hcCxcbiAgICAgIChhbGxJZHMsIGVudGl0eU1hcCkgPT4ge1xuICAgICAgICBpZiAoIWFsbElkcyB8fCAhZW50aXR5TWFwKSB7XG4gICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFsbElkcy5tYXAoaWQgPT4gZW50aXR5TWFwW2lkXSk7XG4gICAgICB9LFxuICAgICksXG4gIH07XG59O1xuXG5leHBvcnQgY29uc3QgYWxsUGFnaW5hdGlvblNlbGVjdG9ycyA9IDxFbnRpdHk+KFxuICBjb250ZXh0SWQ6IHN0cmluZyxcbiAgc2VsZWN0RW50aXR5TWFwOiBTZWxlY3RvcjxhbnksIERpY3Rpb25hcnk8RW50aXR5Pj4sXG4pID0+IHtcbiAgY29uc3QgYmFzaWNTZWxlY3RvcnMgPSBiYXNpY1BhZ2luYXRpb25TZWxlY3RvcnMoY29udGV4dElkKTtcbiAgY29uc3QgYWR2YW5jZWRTZWxlY3RvcnMgPSBhZHZhbmNlZFBhZ2luYXRpb25TZWxlY3RvcnMoXG4gICAgYmFzaWNTZWxlY3RvcnMsXG4gICAgc2VsZWN0RW50aXR5TWFwLFxuICApO1xuICByZXR1cm4ge1xuICAgIC4uLmJhc2ljU2VsZWN0b3JzLFxuICAgIC4uLmFkdmFuY2VkU2VsZWN0b3JzLFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGFsbFBhZ2luYXRpb25PYnNlcnZhYmxlcyA9IDxFbnRpdHk+KFxuICBzdG9yZTogU3RvcmU8YW55PixcbiAgYWxsU2VsZWN0b3JzOiBBbGxOZ3J4UGFnaW5hdGlvblNlbGVjdG9yczxFbnRpdHk+LFxuKTogQWxsTmdyeFBhZ2luYXRpb25PYnNlcnZhYmxlczxFbnRpdHk+ID0+IHtcbiAgY29uc3Qgc2VsID0gPEE+KHNlbGVjdG9yOiBTZWxlY3RvcjxhbnksIEE+KSA9PiBzdG9yZS5waXBlKHNlbGVjdChzZWxlY3RvcikpO1xuICByZXR1cm4gbWFwVmFsdWVzKGFsbFNlbGVjdG9ycywgc2VsKTtcbn07XG4iXX0=