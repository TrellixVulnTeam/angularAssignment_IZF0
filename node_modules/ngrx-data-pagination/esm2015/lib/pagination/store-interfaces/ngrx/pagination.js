/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EntityOp } from '@ngrx/data';
import { select } from '@ngrx/store';
import { from } from 'rxjs';
import { filter, take } from 'rxjs/operators';
import { observableToPromisePaginationFunction, } from '../../iterator/pagination-function';
import { StorePaginationContext } from '../store-pagination-context';
import { allPaginationObservables, allPaginationSelectors, } from './selectors';
/**
 * Adapts `StorePaginationContext` to work with ngrx/data
 * @template Entity, NextPageState
 */
export class Pagination {
    /**
     * @param {?} contextId
     * @param {?} paginationFunction
     * @param {?} entityService
     * @param {?} store
     * @param {?} ngrxDataPaginationStoreKey
     * @param {?} addToCache
     */
    constructor(contextId, paginationFunction, entityService, store, ngrxDataPaginationStoreKey, addToCache) {
        this.entityService = entityService;
        /** @type {?} */
        const dispatch = (/**
         * @param {?} action
         * @return {?}
         */
        (action) => store.dispatch(action));
        /** @type {?} */
        const onReceivePage = (/**
         * @param {?} page
         * @return {?}
         */
        (page) => {
            if (!addToCache) {
                return;
            }
            this.entityService.upsertManyInCache(page);
            this.entityService.createAndDispatch(EntityOp.SAVE_UPSERT_MANY_SUCCESS, page);
        });
        /** @type {?} */
        const paginationState$ = (/** @type {?} */ (store.pipe(select(ngrxDataPaginationStoreKey))));
        /** @type {?} */
        const entityMap$ = entityService.selectors$.entityMap$;
        this.storePaginationContext = new StorePaginationContext(contextId, observableToPromisePaginationFunction(paginationFunction), dispatch, onReceivePage, paginationState$, entityMap$);
        this.selectors = allPaginationSelectors(contextId, entityService.selectors.selectEntityMap);
        this.selectors$ = allPaginationObservables(store, this.selectors);
    }
    /**
     * @return {?}
     */
    nextPage() {
        return this.storePaginationContext.nextPage();
    }
    /**
     * @return {?}
     */
    prevPage() {
        return this.storePaginationContext.prevPage();
    }
    /**
     * Not yet cancellable! Use with caution.
     * @return {?}
     */
    _loadAllPages() {
        return from(this._loadAllPagesP()).pipe(take(1));
    }
    /**
     * @private
     * @return {?}
     */
    _loadAllPagesP() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            // wait until not loading
            yield this.selectors$.nextPageLoading
                .pipe(filter((/**
             * @param {?} loading
             * @return {?}
             */
            loading => !loading)), take(1))
                .toPromise();
            // start the next-page request
            this.nextPage();
            // wait until not loading, again
            yield this.selectors$.nextPageLoading
                .pipe(filter((/**
             * @param {?} loading
             * @return {?}
             */
            loading => !loading)), take(1))
                .toPromise();
            /** @type {?} */
            const done = yield this.selectors$.done
                .pipe(take(1))
                .toPromise();
            if (done) {
                // done case: let the whole function return
                return;
            }
            // recursive case: not done, so recurse
            return this._loadAllPages();
        });
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    Pagination.prototype.storePaginationContext;
    /** @type {?} */
    Pagination.prototype.selectors;
    /** @type {?} */
    Pagination.prototype.selectors$;
    /**
     * @type {?}
     * @private
     */
    Pagination.prototype.entityService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ncngtZGF0YS1wYWdpbmF0aW9uLyIsInNvdXJjZXMiOlsibGliL3BhZ2luYXRpb24vc3RvcmUtaW50ZXJmYWNlcy9uZ3J4L3BhZ2luYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQStCLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNuRSxPQUFPLEVBQVUsTUFBTSxFQUFTLE1BQU0sYUFBYSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxJQUFJLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDeEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU5QyxPQUFPLEVBRUwscUNBQXFDLEdBQ3RDLE1BQU0sb0NBQW9DLENBQUM7QUFFNUMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDckUsT0FBTyxFQUdMLHdCQUF3QixFQUN4QixzQkFBc0IsR0FDdkIsTUFBTSxhQUFhLENBQUM7Ozs7O0FBS3JCLE1BQU0sT0FBTyxVQUFVOzs7Ozs7Ozs7SUFLckIsWUFDRSxTQUFpQixFQUNqQixrQkFBdUUsRUFDL0QsYUFBdUQsRUFDL0QsS0FBaUIsRUFDakIsMEJBQWtDLEVBQ2xDLFVBQW1CO1FBSFgsa0JBQWEsR0FBYixhQUFhLENBQTBDOztjQUt6RCxRQUFROzs7O1FBQUcsQ0FBQyxNQUFjLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUE7O2NBRXJELGFBQWE7Ozs7UUFBRyxDQUFDLElBQWMsRUFBUSxFQUFFO1lBQzdDLElBQUksQ0FBQyxVQUFVLEVBQUU7Z0JBQ2YsT0FBTzthQUNSO1lBQ0QsSUFBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQztZQUMzQyxJQUFJLENBQUMsYUFBYSxDQUFDLGlCQUFpQixDQUFDLFFBQVEsQ0FBQyx3QkFBd0IsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNoRixDQUFDLENBQUE7O2NBRUssZ0JBQWdCLEdBQUcsbUJBQUEsS0FBSyxDQUFDLElBQUksQ0FDakMsTUFBTSxDQUFDLDBCQUEwQixDQUFDLENBQ25DLEVBQStCOztjQUUxQixVQUFVLEdBQUcsYUFBYSxDQUFDLFVBQVUsQ0FBQyxVQUFVO1FBRXRELElBQUksQ0FBQyxzQkFBc0IsR0FBRyxJQUFJLHNCQUFzQixDQUN0RCxTQUFTLEVBQ1QscUNBQXFDLENBQUMsa0JBQWtCLENBQUMsRUFDekQsUUFBUSxFQUNSLGFBQWEsRUFDYixnQkFBZ0IsRUFDaEIsVUFBVSxDQUNYLENBQUM7UUFFRixJQUFJLENBQUMsU0FBUyxHQUFHLHNCQUFzQixDQUNyQyxTQUFTLEVBQ1QsYUFBYSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQ3hDLENBQUM7UUFDRixJQUFJLENBQUMsVUFBVSxHQUFHLHdCQUF3QixDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDcEUsQ0FBQzs7OztJQUVELFFBQVE7UUFDTixPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNoRCxDQUFDOzs7O0lBRUQsUUFBUTtRQUNOLE9BQU8sSUFBSSxDQUFDLHNCQUFzQixDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2hELENBQUM7Ozs7O0lBR0QsYUFBYTtRQUNYLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuRCxDQUFDOzs7OztJQUVhLGNBQWM7O1lBQzFCLHlCQUF5QjtZQUN6QixNQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsZUFBZTtpQkFDbEMsSUFBSSxDQUNILE1BQU07Ozs7WUFBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUMsT0FBTyxFQUFDLEVBQzNCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDUjtpQkFDQSxTQUFTLEVBQUUsQ0FBQztZQUVmLDhCQUE4QjtZQUM5QixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7WUFFaEIsZ0NBQWdDO1lBQ2hDLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlO2lCQUNsQyxJQUFJLENBQ0gsTUFBTTs7OztZQUFDLE9BQU8sQ0FBQyxFQUFFLENBQUMsQ0FBQyxPQUFPLEVBQUMsRUFDM0IsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUNSO2lCQUNBLFNBQVMsRUFBRSxDQUFDOztrQkFFVCxJQUFJLEdBQUcsTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUk7aUJBQ3BDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ2IsU0FBUyxFQUFFO1lBRWQsSUFBSSxJQUFJLEVBQUU7Z0JBQ1IsMkNBQTJDO2dCQUMzQyxPQUFPO2FBQ1I7WUFFRCx1Q0FBdUM7WUFDdkMsT0FBTyxJQUFJLENBQUMsYUFBYSxFQUFFLENBQUM7UUFDOUIsQ0FBQztLQUFBO0NBQ0Y7Ozs7OztJQXpGQyw0Q0FBK0Q7O0lBQy9ELCtCQUFxRDs7SUFDckQsZ0NBQXdEOzs7OztJQUt0RCxtQ0FBK0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbnRpdHlDb2xsZWN0aW9uU2VydmljZUJhc2UsIEVudGl0eU9wIH0gZnJvbSAnQG5ncngvZGF0YSc7XG5pbXBvcnQgeyBBY3Rpb24sIHNlbGVjdCwgU3RvcmUgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBmcm9tLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBmaWx0ZXIsIHRha2UgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBBbnlFbnRpdHkgfSBmcm9tICcuLi8uLi9lbnRpdHknO1xuaW1wb3J0IHtcbiAgT2JzZXJ2YWJsZVBhZ2luYXRpb25GdW5jdGlvbixcbiAgb2JzZXJ2YWJsZVRvUHJvbWlzZVBhZ2luYXRpb25GdW5jdGlvbixcbn0gZnJvbSAnLi4vLi4vaXRlcmF0b3IvcGFnaW5hdGlvbi1mdW5jdGlvbic7XG5pbXBvcnQgeyBQYWdpbmF0aW9uU3RhdGUgfSBmcm9tICcuLi8uLi9zdG9yZS9zdGF0ZSc7XG5pbXBvcnQgeyBTdG9yZVBhZ2luYXRpb25Db250ZXh0IH0gZnJvbSAnLi4vc3RvcmUtcGFnaW5hdGlvbi1jb250ZXh0JztcbmltcG9ydCB7XG4gIEFsbE5ncnhQYWdpbmF0aW9uT2JzZXJ2YWJsZXMsXG4gIEFsbE5ncnhQYWdpbmF0aW9uU2VsZWN0b3JzLFxuICBhbGxQYWdpbmF0aW9uT2JzZXJ2YWJsZXMsXG4gIGFsbFBhZ2luYXRpb25TZWxlY3RvcnMsXG59IGZyb20gJy4vc2VsZWN0b3JzJztcblxuLyoqXG4gKiBBZGFwdHMgYFN0b3JlUGFnaW5hdGlvbkNvbnRleHRgIHRvIHdvcmsgd2l0aCBuZ3J4L2RhdGFcbiAqL1xuZXhwb3J0IGNsYXNzIFBhZ2luYXRpb248RW50aXR5IGV4dGVuZHMgQW55RW50aXR5LCBOZXh0UGFnZVN0YXRlID0gYW55PiB7XG4gIHByaXZhdGUgc3RvcmVQYWdpbmF0aW9uQ29udGV4dDogU3RvcmVQYWdpbmF0aW9uQ29udGV4dDxFbnRpdHk+O1xuICBwdWJsaWMgc2VsZWN0b3JzOiBBbGxOZ3J4UGFnaW5hdGlvblNlbGVjdG9yczxFbnRpdHk+O1xuICBwdWJsaWMgc2VsZWN0b3JzJDogQWxsTmdyeFBhZ2luYXRpb25PYnNlcnZhYmxlczxFbnRpdHk+O1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIGNvbnRleHRJZDogc3RyaW5nLFxuICAgIHBhZ2luYXRpb25GdW5jdGlvbjogT2JzZXJ2YWJsZVBhZ2luYXRpb25GdW5jdGlvbjxFbnRpdHksIE5leHRQYWdlU3RhdGU+LFxuICAgIHByaXZhdGUgZW50aXR5U2VydmljZTogRW50aXR5Q29sbGVjdGlvblNlcnZpY2VCYXNlPEVudGl0eSwgYW55PixcbiAgICBzdG9yZTogU3RvcmU8YW55PixcbiAgICBuZ3J4RGF0YVBhZ2luYXRpb25TdG9yZUtleTogc3RyaW5nLFxuICAgIGFkZFRvQ2FjaGU6IGJvb2xlYW4sXG4gICkge1xuICAgIGNvbnN0IGRpc3BhdGNoID0gKGFjdGlvbjogQWN0aW9uKSA9PiBzdG9yZS5kaXNwYXRjaChhY3Rpb24pO1xuXG4gICAgY29uc3Qgb25SZWNlaXZlUGFnZSA9IChwYWdlOiBFbnRpdHlbXSk6IHZvaWQgPT4ge1xuICAgICAgaWYgKCFhZGRUb0NhY2hlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHRoaXMuZW50aXR5U2VydmljZS51cHNlcnRNYW55SW5DYWNoZShwYWdlKTtcbiAgICAgIHRoaXMuZW50aXR5U2VydmljZS5jcmVhdGVBbmREaXNwYXRjaChFbnRpdHlPcC5TQVZFX1VQU0VSVF9NQU5ZX1NVQ0NFU1MsIHBhZ2UpO1xuICAgIH07XG5cbiAgICBjb25zdCBwYWdpbmF0aW9uU3RhdGUkID0gc3RvcmUucGlwZShcbiAgICAgIHNlbGVjdChuZ3J4RGF0YVBhZ2luYXRpb25TdG9yZUtleSksXG4gICAgKSBhcyBPYnNlcnZhYmxlPFBhZ2luYXRpb25TdGF0ZT47XG5cbiAgICBjb25zdCBlbnRpdHlNYXAkID0gZW50aXR5U2VydmljZS5zZWxlY3RvcnMkLmVudGl0eU1hcCQ7XG5cbiAgICB0aGlzLnN0b3JlUGFnaW5hdGlvbkNvbnRleHQgPSBuZXcgU3RvcmVQYWdpbmF0aW9uQ29udGV4dChcbiAgICAgIGNvbnRleHRJZCxcbiAgICAgIG9ic2VydmFibGVUb1Byb21pc2VQYWdpbmF0aW9uRnVuY3Rpb24ocGFnaW5hdGlvbkZ1bmN0aW9uKSxcbiAgICAgIGRpc3BhdGNoLFxuICAgICAgb25SZWNlaXZlUGFnZSxcbiAgICAgIHBhZ2luYXRpb25TdGF0ZSQsXG4gICAgICBlbnRpdHlNYXAkLFxuICAgICk7XG5cbiAgICB0aGlzLnNlbGVjdG9ycyA9IGFsbFBhZ2luYXRpb25TZWxlY3RvcnMoXG4gICAgICBjb250ZXh0SWQsXG4gICAgICBlbnRpdHlTZXJ2aWNlLnNlbGVjdG9ycy5zZWxlY3RFbnRpdHlNYXAsXG4gICAgKTtcbiAgICB0aGlzLnNlbGVjdG9ycyQgPSBhbGxQYWdpbmF0aW9uT2JzZXJ2YWJsZXMoc3RvcmUsIHRoaXMuc2VsZWN0b3JzKTtcbiAgfVxuXG4gIG5leHRQYWdlKCk6IHZvaWQge1xuICAgIHJldHVybiB0aGlzLnN0b3JlUGFnaW5hdGlvbkNvbnRleHQubmV4dFBhZ2UoKTtcbiAgfVxuXG4gIHByZXZQYWdlKCk6IHZvaWQge1xuICAgIHJldHVybiB0aGlzLnN0b3JlUGFnaW5hdGlvbkNvbnRleHQucHJldlBhZ2UoKTtcbiAgfVxuXG4gIC8qKiBOb3QgeWV0IGNhbmNlbGxhYmxlISBVc2Ugd2l0aCBjYXV0aW9uLiAqL1xuICBfbG9hZEFsbFBhZ2VzKCk6IE9ic2VydmFibGU8dW5rbm93bj4ge1xuICAgIHJldHVybiBmcm9tKHRoaXMuX2xvYWRBbGxQYWdlc1AoKSkucGlwZSh0YWtlKDEpKTtcbiAgfVxuXG4gIHByaXZhdGUgYXN5bmMgX2xvYWRBbGxQYWdlc1AoKSB7XG4gICAgLy8gd2FpdCB1bnRpbCBub3QgbG9hZGluZ1xuICAgIGF3YWl0IHRoaXMuc2VsZWN0b3JzJC5uZXh0UGFnZUxvYWRpbmdcbiAgICAgIC5waXBlKFxuICAgICAgICBmaWx0ZXIobG9hZGluZyA9PiAhbG9hZGluZyksXG4gICAgICAgIHRha2UoMSksXG4gICAgICApXG4gICAgICAudG9Qcm9taXNlKCk7XG5cbiAgICAvLyBzdGFydCB0aGUgbmV4dC1wYWdlIHJlcXVlc3RcbiAgICB0aGlzLm5leHRQYWdlKCk7XG5cbiAgICAvLyB3YWl0IHVudGlsIG5vdCBsb2FkaW5nLCBhZ2FpblxuICAgIGF3YWl0IHRoaXMuc2VsZWN0b3JzJC5uZXh0UGFnZUxvYWRpbmdcbiAgICAgIC5waXBlKFxuICAgICAgICBmaWx0ZXIobG9hZGluZyA9PiAhbG9hZGluZyksXG4gICAgICAgIHRha2UoMSksXG4gICAgICApXG4gICAgICAudG9Qcm9taXNlKCk7XG5cbiAgICBjb25zdCBkb25lID0gYXdhaXQgdGhpcy5zZWxlY3RvcnMkLmRvbmVcbiAgICAgIC5waXBlKHRha2UoMSkpXG4gICAgICAudG9Qcm9taXNlKCk7XG5cbiAgICBpZiAoZG9uZSkge1xuICAgICAgLy8gZG9uZSBjYXNlOiBsZXQgdGhlIHdob2xlIGZ1bmN0aW9uIHJldHVyblxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIHJlY3Vyc2l2ZSBjYXNlOiBub3QgZG9uZSwgc28gcmVjdXJzZVxuICAgIHJldHVybiB0aGlzLl9sb2FkQWxsUGFnZXMoKTtcbiAgfVxufVxuIl19