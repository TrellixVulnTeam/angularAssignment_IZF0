import { Dictionary } from '@ngrx/entity';
import { Selector, Store } from '@ngrx/store';
import { Observable } from 'rxjs';
import { ContextSelectors } from '../../store/selectors';
interface AdvancedSelections<Entity> {
    page: Entity[] | null;
    all: Entity[] | null;
}
export declare type BasicNgrxPaginationSelectors = {
    [K in keyof ContextSelectors]: Selector<any, ReturnType<ContextSelectors[K]>>;
};
declare type AdvancedNgrxPaginationSelectors<Entity> = {
    [K in keyof AdvancedSelections<Entity>]: Selector<any, AdvancedSelections<Entity>[K]>;
};
export declare type AllNgrxPaginationSelectors<Entity> = BasicNgrxPaginationSelectors & AdvancedNgrxPaginationSelectors<Entity>;
export declare type BasicNgrxPaginationObservables = {
    [K in keyof ContextSelectors]: Observable<ReturnType<ContextSelectors[K]>>;
};
declare type AdvancedNgrxPaginationObservables<Entity> = {
    [K in keyof AdvancedSelections<Entity>]: Observable<AdvancedSelections<Entity>[K]>;
};
export declare type AllNgrxPaginationObservables<Entity> = BasicNgrxPaginationObservables & AdvancedNgrxPaginationObservables<Entity>;
export declare const allPaginationSelectors: <Entity>(contextId: string, selectEntityMap: Selector<any, Dictionary<Entity>>) => {
    page: Selector<any, Entity[]>;
    all: Selector<any, Entity[]>;
    currentPageIds: Selector<any, (string | number)[]>;
    allIds: Selector<any, (string | number)[]>;
    allPageIds: Selector<any, (string | number)[][]>;
    nextPageLoaded: Selector<any, boolean>;
    nextPageLoading: Selector<any, boolean>;
    loadingNewPage: Selector<any, boolean>;
    pageNumber: Selector<any, number>;
    done: Selector<any, boolean>;
    finalPageIndex: Selector<any, number>;
    onFirstPage: Selector<any, boolean>;
    onFinalPage: Selector<any, boolean>;
};
export declare const allPaginationObservables: <Entity>(store: Store<any>, allSelectors: AllNgrxPaginationSelectors<Entity>) => AllNgrxPaginationObservables<Entity>;
export {};
