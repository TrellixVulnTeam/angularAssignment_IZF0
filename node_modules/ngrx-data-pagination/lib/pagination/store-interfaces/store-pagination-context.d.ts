import { Observable } from 'rxjs';
import { AnyEntity, EntityMap } from '../entity';
import { PaginationFunction } from '../iterator/pagination-function';
import { PaginationActionT } from '../store/actions';
import { PaginationState } from '../store/state';
/**
 * This is a pagination context usable with Redux, ngrx, or
 * any other similar implementations. It writes to, but does
 * not read from the store. It assumes:
 * 1. `dispatch` dispatches an action to the store
 * 2. TODO this library's reducer has been installed
 */
export declare class StorePaginationContext<Entity extends AnyEntity> {
    private onReceivePage;
    private pageIterator;
    private dispatchers;
    private contextState;
    private contextState$;
    private entityMap$;
    private subscription;
    constructor(contextId: string, paginationFunction: PaginationFunction<Entity>, dispatch: (action: PaginationActionT) => void, onReceivePage: (entities: Entity[]) => void, state$: Observable<PaginationState>, entityMap$: Observable<EntityMap<Entity>>);
    getNextPageP(): Promise<Entity[]>;
    nextPage(): void;
    prevPage(): void;
    private incrementCurrentPage;
    readonly currentPage$: Observable<Entity[] | null>;
    destroy(): void;
    [Symbol.asyncIterator]: () => () => any;
}
