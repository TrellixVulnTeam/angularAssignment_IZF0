import { EntityId } from '../entity';
export declare enum PaginationActionType {
    RESET_PAGINATION_STATE = "[mb-Pagination] Reset Pagination State",
    GET_NEXT_PAGE = "[mb-Pagination] Get Next Page",
    GET_NEXT_PAGE_SUCCESS = "[mb-Pagination] Get Next Page Success",
    GET_NEXT_PAGE_EMPTY = "[mb-Pagination] Get Next Page Empty",
    PREV_PAGE = "[mb-Pagination] Prev Page",
    NEXT_PAGE = "[mb-Pagination] Next Page"
}
interface Action {
    type: string;
}
export interface PaginationActionT extends Action {
    type: PaginationActionType;
    contextId: string;
}
export declare class ResetPaginationState implements PaginationActionT {
    contextId: string;
    readonly type = PaginationActionType.RESET_PAGINATION_STATE;
    constructor(contextId: string);
}
export declare class GetNextPage implements PaginationActionT {
    contextId: string;
    readonly type = PaginationActionType.GET_NEXT_PAGE;
    constructor(contextId: string);
}
export declare class GetNextPageSuccess implements PaginationActionT {
    contextId: string;
    entityIds: EntityId[];
    done: boolean;
    readonly type = PaginationActionType.GET_NEXT_PAGE_SUCCESS;
    constructor(contextId: string, entityIds: EntityId[], done: boolean);
}
export declare class GetNextPageEmpty implements PaginationActionT {
    contextId: string;
    readonly type = PaginationActionType.GET_NEXT_PAGE_EMPTY;
    constructor(contextId: string);
}
export declare class PrevPage implements PaginationActionT {
    contextId: string;
    readonly type = PaginationActionType.PREV_PAGE;
    constructor(contextId: string);
}
export declare class NextPage implements PaginationActionT {
    contextId: string;
    readonly type = PaginationActionType.NEXT_PAGE;
    constructor(contextId: string);
}
export declare type PaginationAction = ResetPaginationState | GetNextPage | GetNextPageSuccess | GetNextPageEmpty | PrevPage | NextPage;
export declare const makeActionCreators: (contextId: string) => {
    ResetPaginationState: () => ResetPaginationState;
    GetNextPage: () => GetNextPage;
    GetNextPageSuccess: (entityIds: (string | number)[], done: boolean) => GetNextPageSuccess;
    GetNextPageEmpty: () => GetNextPageEmpty;
    PrevPage: () => PrevPage;
    NextPage: () => NextPage;
};
export declare const makeDispatchers: (contextId: string, dispatch: (action: Action) => void) => {
    ResetPaginationState: () => void;
    GetNextPage: () => void;
    GetNextPageSuccess: (entityIds: (string | number)[], done: boolean) => void;
    GetNextPageEmpty: () => void;
    PrevPage: () => void;
    NextPage: () => void;
};
export {};
