/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { combineLatest } from 'rxjs';
import { map, shareReplay } from 'rxjs/operators';
import { PageIterator } from '../iterator/page-iterator';
import { makeDispatchers } from '../store/actions';
import { contextSelectors } from '../store/selectors';
import { defaultPaginationContextState, } from '../store/state';
// assumes paginator reducer is plugged in
/**
 * This is a pagination context usable with Redux, ngrx, or
 * any other similar implementations. It writes to, but does
 * not read from the store. It assumes:
 * 1. `dispatch` dispatches an action to the store
 * 2. TODO this library's reducer has been installed
 * @template Entity
 */
var 
// assumes paginator reducer is plugged in
/**
 * This is a pagination context usable with Redux, ngrx, or
 * any other similar implementations. It writes to, but does
 * not read from the store. It assumes:
 * 1. `dispatch` dispatches an action to the store
 * 2. TODO this library's reducer has been installed
 * @template Entity
 */
StorePaginationContext = /** @class */ (function () {
    function StorePaginationContext(
    // Arbitrary. For now, only use one ReduxLikePaginationContext per contextId
    contextId, 
    // For requesting the pages
    paginationFunction, 
    // Dispatch an action meant for the PaginationReducer
    dispatch, onReceivePage, state$, entityMap$) {
        var _this = this;
        this.onReceivePage = onReceivePage;
        this.contextState = defaultPaginationContextState;
        this[Symbol.asyncIterator] = (/**
         * @return {?}
         */
        function () { return _this.pageIterator[Symbol.asyncIterator]; });
        this.contextState$ = state$.pipe(map((/**
         * @param {?} state
         * @return {?}
         */
        function (state) {
            return state ? state.contexts[contextId] : defaultPaginationContextState;
        })));
        this.subscription = this.contextState$.subscribe((/**
         * @param {?} contextState
         * @return {?}
         */
        function (contextState) {
            _this.contextState = contextState;
        }));
        this.dispatchers = makeDispatchers(contextId, dispatch);
        this.dispatchers.ResetPaginationState();
        this.pageIterator = new PageIterator(paginationFunction);
        this.entityMap$ = entityMap$.pipe(shareReplay(1));
        // wait until next event loop in case of setup time
        setTimeout((/**
         * @return {?}
         */
        function () { return _this.nextPage(); }), 0);
    }
    /**
     * @return {?}
     */
    StorePaginationContext.prototype.getNextPageP = /**
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var nextPageLoaded, page, entityIds;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        nextPageLoaded = contextSelectors.nextPageLoaded(this.contextState);
                        if (nextPageLoaded) {
                            this.incrementCurrentPage();
                            return [2 /*return*/];
                        }
                        if (contextSelectors.done(this.contextState)) {
                            throw new Error('Cannot get more pages after becoming done');
                        }
                        this.dispatchers.GetNextPage();
                        return [4 /*yield*/, this.pageIterator.getNextPage()];
                    case 1:
                        page = _a.sent();
                        this.onReceivePage(page);
                        if (!page) {
                            throw new Error('bad page in getNextPageP');
                        }
                        entityIds = page.map((/**
                         * @param {?} __0
                         * @return {?}
                         */
                        function (_a) {
                            var id = _a.id;
                            return id;
                        }));
                        if (!entityIds.length) {
                            this.dispatchers.GetNextPageEmpty();
                        }
                        else {
                            this.dispatchers.GetNextPageSuccess(entityIds, this.pageIterator.done);
                        }
                        return [2 /*return*/, page];
                }
            });
        });
    };
    /**
     * @return {?}
     */
    StorePaginationContext.prototype.nextPage = /**
     * @return {?}
     */
    function () {
        this.getNextPageP();
    };
    /**
     * @return {?}
     */
    StorePaginationContext.prototype.prevPage = /**
     * @return {?}
     */
    function () {
        if (this.contextState.currentPage <= 0) {
            throw new Error('Cannot go back from page 0');
        }
        this.dispatchers.PrevPage();
    };
    /**
     * @private
     * @return {?}
     */
    StorePaginationContext.prototype.incrementCurrentPage = /**
     * @private
     * @return {?}
     */
    function () {
        this.dispatchers.NextPage();
    };
    Object.defineProperty(StorePaginationContext.prototype, "currentPage$", {
        get: /**
         * @return {?}
         */
        function () {
            return combineLatest(this.entityMap$, this.contextState$).pipe(map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), entityMap = _b[0], contextState = _b[1];
                /** @type {?} */
                var currentPageIds = contextSelectors.currentPageIds(contextState);
                if (!currentPageIds) {
                    return null;
                }
                return currentPageIds.map((/**
                 * @param {?} entityId
                 * @return {?}
                 */
                function (entityId) { return entityMap[entityId]; }));
            })));
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    StorePaginationContext.prototype.destroy = /**
     * @return {?}
     */
    function () {
        this.subscription.unsubscribe();
    };
    return StorePaginationContext;
}());
// assumes paginator reducer is plugged in
/**
 * This is a pagination context usable with Redux, ngrx, or
 * any other similar implementations. It writes to, but does
 * not read from the store. It assumes:
 * 1. `dispatch` dispatches an action to the store
 * 2. TODO this library's reducer has been installed
 * @template Entity
 */
export { StorePaginationContext };
if (false) {
    /**
     * @type {?}
     * @private
     */
    StorePaginationContext.prototype.pageIterator;
    /**
     * @type {?}
     * @private
     */
    StorePaginationContext.prototype.dispatchers;
    /**
     * @type {?}
     * @private
     */
    StorePaginationContext.prototype.contextState;
    /**
     * @type {?}
     * @private
     */
    StorePaginationContext.prototype.contextState$;
    /**
     * @type {?}
     * @private
     */
    StorePaginationContext.prototype.entityMap$;
    /**
     * @type {?}
     * @private
     */
    StorePaginationContext.prototype.subscription;
    /* Skipping unnamed member:
    [Symbol.asyncIterator] = () => this.pageIterator[Symbol.asyncIterator];*/
    /**
     * @type {?}
     * @private
     */
    StorePaginationContext.prototype.onReceivePage;
}
//# sourceMappingURL=data:application/json;base64,