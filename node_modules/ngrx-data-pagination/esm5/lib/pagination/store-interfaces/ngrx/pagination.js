/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { EntityOp } from '@ngrx/data';
import { select } from '@ngrx/store';
import { from } from 'rxjs';
import { filter, take } from 'rxjs/operators';
import { observableToPromisePaginationFunction, } from '../../iterator/pagination-function';
import { StorePaginationContext } from '../store-pagination-context';
import { allPaginationObservables, allPaginationSelectors, } from './selectors';
/**
 * Adapts `StorePaginationContext` to work with ngrx/data
 * @template Entity, NextPageState
 */
var /**
 * Adapts `StorePaginationContext` to work with ngrx/data
 * @template Entity, NextPageState
 */
Pagination = /** @class */ (function () {
    function Pagination(contextId, paginationFunction, entityService, store, ngrxDataPaginationStoreKey, addToCache) {
        var _this = this;
        this.entityService = entityService;
        /** @type {?} */
        var dispatch = (/**
         * @param {?} action
         * @return {?}
         */
        function (action) { return store.dispatch(action); });
        /** @type {?} */
        var onReceivePage = (/**
         * @param {?} page
         * @return {?}
         */
        function (page) {
            if (!addToCache) {
                return;
            }
            _this.entityService.upsertManyInCache(page);
            _this.entityService.createAndDispatch(EntityOp.SAVE_UPSERT_MANY_SUCCESS, page);
        });
        /** @type {?} */
        var paginationState$ = (/** @type {?} */ (store.pipe(select(ngrxDataPaginationStoreKey))));
        /** @type {?} */
        var entityMap$ = entityService.selectors$.entityMap$;
        this.storePaginationContext = new StorePaginationContext(contextId, observableToPromisePaginationFunction(paginationFunction), dispatch, onReceivePage, paginationState$, entityMap$);
        this.selectors = allPaginationSelectors(contextId, entityService.selectors.selectEntityMap);
        this.selectors$ = allPaginationObservables(store, this.selectors);
    }
    /**
     * @return {?}
     */
    Pagination.prototype.nextPage = /**
     * @return {?}
     */
    function () {
        return this.storePaginationContext.nextPage();
    };
    /**
     * @return {?}
     */
    Pagination.prototype.prevPage = /**
     * @return {?}
     */
    function () {
        return this.storePaginationContext.prevPage();
    };
    /** Not yet cancellable! Use with caution. */
    /**
     * Not yet cancellable! Use with caution.
     * @return {?}
     */
    Pagination.prototype._loadAllPages = /**
     * Not yet cancellable! Use with caution.
     * @return {?}
     */
    function () {
        return from(this._loadAllPagesP()).pipe(take(1));
    };
    /**
     * @private
     * @return {?}
     */
    Pagination.prototype._loadAllPagesP = /**
     * @private
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var done;
            return tslib_1.__generator(this, function (_a) {
                switch (_a.label) {
                    case 0: 
                    // wait until not loading
                    return [4 /*yield*/, this.selectors$.nextPageLoading
                            .pipe(filter((/**
                         * @param {?} loading
                         * @return {?}
                         */
                        function (loading) { return !loading; })), take(1))
                            .toPromise()];
                    case 1:
                        // wait until not loading
                        _a.sent();
                        // start the next-page request
                        this.nextPage();
                        // wait until not loading, again
                        return [4 /*yield*/, this.selectors$.nextPageLoading
                                .pipe(filter((/**
                             * @param {?} loading
                             * @return {?}
                             */
                            function (loading) { return !loading; })), take(1))
                                .toPromise()];
                    case 2:
                        // wait until not loading, again
                        _a.sent();
                        return [4 /*yield*/, this.selectors$.done
                                .pipe(take(1))
                                .toPromise()];
                    case 3:
                        done = _a.sent();
                        if (done) {
                            // done case: let the whole function return
                            return [2 /*return*/];
                        }
                        // recursive case: not done, so recurse
                        return [2 /*return*/, this._loadAllPages()];
                }
            });
        });
    };
    return Pagination;
}());
/**
 * Adapts `StorePaginationContext` to work with ngrx/data
 * @template Entity, NextPageState
 */
export { Pagination };
if (false) {
    /**
     * @type {?}
     * @private
     */
    Pagination.prototype.storePaginationContext;
    /** @type {?} */
    Pagination.prototype.selectors;
    /** @type {?} */
    Pagination.prototype.selectors$;
    /**
     * @type {?}
     * @private
     */
    Pagination.prototype.entityService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ncngtZGF0YS1wYWdpbmF0aW9uLyIsInNvdXJjZXMiOlsibGliL3BhZ2luYXRpb24vc3RvcmUtaW50ZXJmYWNlcy9uZ3J4L3BhZ2luYXRpb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQStCLFFBQVEsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNuRSxPQUFPLEVBQVUsTUFBTSxFQUFTLE1BQU0sYUFBYSxDQUFDO0FBQ3BELE9BQU8sRUFBRSxJQUFJLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDeEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU5QyxPQUFPLEVBRUwscUNBQXFDLEdBQ3RDLE1BQU0sb0NBQW9DLENBQUM7QUFFNUMsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sNkJBQTZCLENBQUM7QUFDckUsT0FBTyxFQUdMLHdCQUF3QixFQUN4QixzQkFBc0IsR0FDdkIsTUFBTSxhQUFhLENBQUM7Ozs7O0FBS3JCOzs7OztJQUtFLG9CQUNFLFNBQWlCLEVBQ2pCLGtCQUF1RSxFQUMvRCxhQUF1RCxFQUMvRCxLQUFpQixFQUNqQiwwQkFBa0MsRUFDbEMsVUFBbUI7UUFOckIsaUJBc0NDO1FBbkNTLGtCQUFhLEdBQWIsYUFBYSxDQUEwQzs7WUFLekQsUUFBUTs7OztRQUFHLFVBQUMsTUFBYyxJQUFLLE9BQUEsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBdEIsQ0FBc0IsQ0FBQTs7WUFFckQsYUFBYTs7OztRQUFHLFVBQUMsSUFBYztZQUNuQyxJQUFJLENBQUMsVUFBVSxFQUFFO2dCQUNmLE9BQU87YUFDUjtZQUNELEtBQUksQ0FBQyxhQUFhLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDM0MsS0FBSSxDQUFDLGFBQWEsQ0FBQyxpQkFBaUIsQ0FBQyxRQUFRLENBQUMsd0JBQXdCLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDaEYsQ0FBQyxDQUFBOztZQUVLLGdCQUFnQixHQUFHLG1CQUFBLEtBQUssQ0FBQyxJQUFJLENBQ2pDLE1BQU0sQ0FBQywwQkFBMEIsQ0FBQyxDQUNuQyxFQUErQjs7WUFFMUIsVUFBVSxHQUFHLGFBQWEsQ0FBQyxVQUFVLENBQUMsVUFBVTtRQUV0RCxJQUFJLENBQUMsc0JBQXNCLEdBQUcsSUFBSSxzQkFBc0IsQ0FDdEQsU0FBUyxFQUNULHFDQUFxQyxDQUFDLGtCQUFrQixDQUFDLEVBQ3pELFFBQVEsRUFDUixhQUFhLEVBQ2IsZ0JBQWdCLEVBQ2hCLFVBQVUsQ0FDWCxDQUFDO1FBRUYsSUFBSSxDQUFDLFNBQVMsR0FBRyxzQkFBc0IsQ0FDckMsU0FBUyxFQUNULGFBQWEsQ0FBQyxTQUFTLENBQUMsZUFBZSxDQUN4QyxDQUFDO1FBQ0YsSUFBSSxDQUFDLFVBQVUsR0FBRyx3QkFBd0IsQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7Ozs7SUFFRCw2QkFBUTs7O0lBQVI7UUFDRSxPQUFPLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNoRCxDQUFDOzs7O0lBRUQsNkJBQVE7OztJQUFSO1FBQ0UsT0FBTyxJQUFJLENBQUMsc0JBQXNCLENBQUMsUUFBUSxFQUFFLENBQUM7SUFDaEQsQ0FBQztJQUVELDZDQUE2Qzs7Ozs7SUFDN0Msa0NBQWE7Ozs7SUFBYjtRQUNFLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxjQUFjLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNuRCxDQUFDOzs7OztJQUVhLG1DQUFjOzs7O0lBQTVCOzs7Ozs7b0JBQ0UseUJBQXlCO29CQUN6QixxQkFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLGVBQWU7NkJBQ2xDLElBQUksQ0FDSCxNQUFNOzs7O3dCQUFDLFVBQUEsT0FBTyxJQUFJLE9BQUEsQ0FBQyxPQUFPLEVBQVIsQ0FBUSxFQUFDLEVBQzNCLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FDUjs2QkFDQSxTQUFTLEVBQUUsRUFBQTs7d0JBTmQseUJBQXlCO3dCQUN6QixTQUtjLENBQUM7d0JBRWYsOEJBQThCO3dCQUM5QixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7d0JBRWhCLGdDQUFnQzt3QkFDaEMscUJBQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxlQUFlO2lDQUNsQyxJQUFJLENBQ0gsTUFBTTs7Ozs0QkFBQyxVQUFBLE9BQU8sSUFBSSxPQUFBLENBQUMsT0FBTyxFQUFSLENBQVEsRUFBQyxFQUMzQixJQUFJLENBQUMsQ0FBQyxDQUFDLENBQ1I7aUNBQ0EsU0FBUyxFQUFFLEVBQUE7O3dCQU5kLGdDQUFnQzt3QkFDaEMsU0FLYyxDQUFDO3dCQUVGLHFCQUFNLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSTtpQ0FDcEMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztpQ0FDYixTQUFTLEVBQUUsRUFBQTs7d0JBRlIsSUFBSSxHQUFHLFNBRUM7d0JBRWQsSUFBSSxJQUFJLEVBQUU7NEJBQ1IsMkNBQTJDOzRCQUMzQyxzQkFBTzt5QkFDUjt3QkFFRCx1Q0FBdUM7d0JBQ3ZDLHNCQUFPLElBQUksQ0FBQyxhQUFhLEVBQUUsRUFBQzs7OztLQUM3QjtJQUNILGlCQUFDO0FBQUQsQ0FBQyxBQTFGRCxJQTBGQzs7Ozs7Ozs7Ozs7SUF6RkMsNENBQStEOztJQUMvRCwrQkFBcUQ7O0lBQ3JELGdDQUF3RDs7Ozs7SUFLdEQsbUNBQStEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRW50aXR5Q29sbGVjdGlvblNlcnZpY2VCYXNlLCBFbnRpdHlPcCB9IGZyb20gJ0BuZ3J4L2RhdGEnO1xuaW1wb3J0IHsgQWN0aW9uLCBzZWxlY3QsIFN0b3JlIH0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgZnJvbSwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgZmlsdGVyLCB0YWtlIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgQW55RW50aXR5IH0gZnJvbSAnLi4vLi4vZW50aXR5JztcbmltcG9ydCB7XG4gIE9ic2VydmFibGVQYWdpbmF0aW9uRnVuY3Rpb24sXG4gIG9ic2VydmFibGVUb1Byb21pc2VQYWdpbmF0aW9uRnVuY3Rpb24sXG59IGZyb20gJy4uLy4uL2l0ZXJhdG9yL3BhZ2luYXRpb24tZnVuY3Rpb24nO1xuaW1wb3J0IHsgUGFnaW5hdGlvblN0YXRlIH0gZnJvbSAnLi4vLi4vc3RvcmUvc3RhdGUnO1xuaW1wb3J0IHsgU3RvcmVQYWdpbmF0aW9uQ29udGV4dCB9IGZyb20gJy4uL3N0b3JlLXBhZ2luYXRpb24tY29udGV4dCc7XG5pbXBvcnQge1xuICBBbGxOZ3J4UGFnaW5hdGlvbk9ic2VydmFibGVzLFxuICBBbGxOZ3J4UGFnaW5hdGlvblNlbGVjdG9ycyxcbiAgYWxsUGFnaW5hdGlvbk9ic2VydmFibGVzLFxuICBhbGxQYWdpbmF0aW9uU2VsZWN0b3JzLFxufSBmcm9tICcuL3NlbGVjdG9ycyc7XG5cbi8qKlxuICogQWRhcHRzIGBTdG9yZVBhZ2luYXRpb25Db250ZXh0YCB0byB3b3JrIHdpdGggbmdyeC9kYXRhXG4gKi9cbmV4cG9ydCBjbGFzcyBQYWdpbmF0aW9uPEVudGl0eSBleHRlbmRzIEFueUVudGl0eSwgTmV4dFBhZ2VTdGF0ZSA9IGFueT4ge1xuICBwcml2YXRlIHN0b3JlUGFnaW5hdGlvbkNvbnRleHQ6IFN0b3JlUGFnaW5hdGlvbkNvbnRleHQ8RW50aXR5PjtcbiAgcHVibGljIHNlbGVjdG9yczogQWxsTmdyeFBhZ2luYXRpb25TZWxlY3RvcnM8RW50aXR5PjtcbiAgcHVibGljIHNlbGVjdG9ycyQ6IEFsbE5ncnhQYWdpbmF0aW9uT2JzZXJ2YWJsZXM8RW50aXR5PjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBjb250ZXh0SWQ6IHN0cmluZyxcbiAgICBwYWdpbmF0aW9uRnVuY3Rpb246IE9ic2VydmFibGVQYWdpbmF0aW9uRnVuY3Rpb248RW50aXR5LCBOZXh0UGFnZVN0YXRlPixcbiAgICBwcml2YXRlIGVudGl0eVNlcnZpY2U6IEVudGl0eUNvbGxlY3Rpb25TZXJ2aWNlQmFzZTxFbnRpdHksIGFueT4sXG4gICAgc3RvcmU6IFN0b3JlPGFueT4sXG4gICAgbmdyeERhdGFQYWdpbmF0aW9uU3RvcmVLZXk6IHN0cmluZyxcbiAgICBhZGRUb0NhY2hlOiBib29sZWFuLFxuICApIHtcbiAgICBjb25zdCBkaXNwYXRjaCA9IChhY3Rpb246IEFjdGlvbikgPT4gc3RvcmUuZGlzcGF0Y2goYWN0aW9uKTtcblxuICAgIGNvbnN0IG9uUmVjZWl2ZVBhZ2UgPSAocGFnZTogRW50aXR5W10pOiB2b2lkID0+IHtcbiAgICAgIGlmICghYWRkVG9DYWNoZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmVudGl0eVNlcnZpY2UudXBzZXJ0TWFueUluQ2FjaGUocGFnZSk7XG4gICAgICB0aGlzLmVudGl0eVNlcnZpY2UuY3JlYXRlQW5kRGlzcGF0Y2goRW50aXR5T3AuU0FWRV9VUFNFUlRfTUFOWV9TVUNDRVNTLCBwYWdlKTtcbiAgICB9O1xuXG4gICAgY29uc3QgcGFnaW5hdGlvblN0YXRlJCA9IHN0b3JlLnBpcGUoXG4gICAgICBzZWxlY3QobmdyeERhdGFQYWdpbmF0aW9uU3RvcmVLZXkpLFxuICAgICkgYXMgT2JzZXJ2YWJsZTxQYWdpbmF0aW9uU3RhdGU+O1xuXG4gICAgY29uc3QgZW50aXR5TWFwJCA9IGVudGl0eVNlcnZpY2Uuc2VsZWN0b3JzJC5lbnRpdHlNYXAkO1xuXG4gICAgdGhpcy5zdG9yZVBhZ2luYXRpb25Db250ZXh0ID0gbmV3IFN0b3JlUGFnaW5hdGlvbkNvbnRleHQoXG4gICAgICBjb250ZXh0SWQsXG4gICAgICBvYnNlcnZhYmxlVG9Qcm9taXNlUGFnaW5hdGlvbkZ1bmN0aW9uKHBhZ2luYXRpb25GdW5jdGlvbiksXG4gICAgICBkaXNwYXRjaCxcbiAgICAgIG9uUmVjZWl2ZVBhZ2UsXG4gICAgICBwYWdpbmF0aW9uU3RhdGUkLFxuICAgICAgZW50aXR5TWFwJCxcbiAgICApO1xuXG4gICAgdGhpcy5zZWxlY3RvcnMgPSBhbGxQYWdpbmF0aW9uU2VsZWN0b3JzKFxuICAgICAgY29udGV4dElkLFxuICAgICAgZW50aXR5U2VydmljZS5zZWxlY3RvcnMuc2VsZWN0RW50aXR5TWFwLFxuICAgICk7XG4gICAgdGhpcy5zZWxlY3RvcnMkID0gYWxsUGFnaW5hdGlvbk9ic2VydmFibGVzKHN0b3JlLCB0aGlzLnNlbGVjdG9ycyk7XG4gIH1cblxuICBuZXh0UGFnZSgpOiB2b2lkIHtcbiAgICByZXR1cm4gdGhpcy5zdG9yZVBhZ2luYXRpb25Db250ZXh0Lm5leHRQYWdlKCk7XG4gIH1cblxuICBwcmV2UGFnZSgpOiB2b2lkIHtcbiAgICByZXR1cm4gdGhpcy5zdG9yZVBhZ2luYXRpb25Db250ZXh0LnByZXZQYWdlKCk7XG4gIH1cblxuICAvKiogTm90IHlldCBjYW5jZWxsYWJsZSEgVXNlIHdpdGggY2F1dGlvbi4gKi9cbiAgX2xvYWRBbGxQYWdlcygpOiBPYnNlcnZhYmxlPHVua25vd24+IHtcbiAgICByZXR1cm4gZnJvbSh0aGlzLl9sb2FkQWxsUGFnZXNQKCkpLnBpcGUodGFrZSgxKSk7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIF9sb2FkQWxsUGFnZXNQKCkge1xuICAgIC8vIHdhaXQgdW50aWwgbm90IGxvYWRpbmdcbiAgICBhd2FpdCB0aGlzLnNlbGVjdG9ycyQubmV4dFBhZ2VMb2FkaW5nXG4gICAgICAucGlwZShcbiAgICAgICAgZmlsdGVyKGxvYWRpbmcgPT4gIWxvYWRpbmcpLFxuICAgICAgICB0YWtlKDEpLFxuICAgICAgKVxuICAgICAgLnRvUHJvbWlzZSgpO1xuXG4gICAgLy8gc3RhcnQgdGhlIG5leHQtcGFnZSByZXF1ZXN0XG4gICAgdGhpcy5uZXh0UGFnZSgpO1xuXG4gICAgLy8gd2FpdCB1bnRpbCBub3QgbG9hZGluZywgYWdhaW5cbiAgICBhd2FpdCB0aGlzLnNlbGVjdG9ycyQubmV4dFBhZ2VMb2FkaW5nXG4gICAgICAucGlwZShcbiAgICAgICAgZmlsdGVyKGxvYWRpbmcgPT4gIWxvYWRpbmcpLFxuICAgICAgICB0YWtlKDEpLFxuICAgICAgKVxuICAgICAgLnRvUHJvbWlzZSgpO1xuXG4gICAgY29uc3QgZG9uZSA9IGF3YWl0IHRoaXMuc2VsZWN0b3JzJC5kb25lXG4gICAgICAucGlwZSh0YWtlKDEpKVxuICAgICAgLnRvUHJvbWlzZSgpO1xuXG4gICAgaWYgKGRvbmUpIHtcbiAgICAgIC8vIGRvbmUgY2FzZTogbGV0IHRoZSB3aG9sZSBmdW5jdGlvbiByZXR1cm5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyByZWN1cnNpdmUgY2FzZTogbm90IGRvbmUsIHNvIHJlY3Vyc2VcbiAgICByZXR1cm4gdGhpcy5fbG9hZEFsbFBhZ2VzKCk7XG4gIH1cbn1cbiJdfQ==