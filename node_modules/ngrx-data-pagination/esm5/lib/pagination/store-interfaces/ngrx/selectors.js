/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { createFeatureSelector, createSelector, select, } from '@ngrx/store';
import { contextSelectors } from '../../store/selectors';
import { defaultStoreKey } from './default-store-key';
/**
 * @record
 * @template Entity
 */
function AdvancedSelections() { }
if (false) {
    /** @type {?} */
    AdvancedSelections.prototype.page;
    /** @type {?} */
    AdvancedSelections.prototype.all;
}
/** @type {?} */
var mapValues = (/**
 * @template A
 * @param {?} obj
 * @param {?} f
 * @return {?}
 */
function (obj, f) {
    var e_1, _a;
    /** @type {?} */
    var result = {};
    try {
        for (var _b = tslib_1.__values(Object.keys(obj)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var k = _c.value;
            result[k] = f(obj[k]);
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
    return (/** @type {?} */ (result));
});
var ɵ0 = mapValues;
/**
 * Creates pagination selectors that only know about the pagination state
 * @type {?}
 */
var basicPaginationSelectors = (/**
 * @param {?} contextId
 * @return {?}
 */
function (contextId) {
    /** @type {?} */
    var paginationState = createFeatureSelector(defaultStoreKey);
    /** @type {?} */
    var contextState = createSelector(paginationState, (/**
     * @param {?} s
     * @return {?}
     */
    function (s) { return s.contexts[contextId]; }));
    /** @type {?} */
    var contextSelector = (/**
     * @template A
     * @param {?} f
     * @return {?}
     */
    function (f) {
        return createSelector(contextState, f);
    });
    return mapValues(contextSelectors, contextSelector);
});
var ɵ1 = basicPaginationSelectors;
/**
 * Creates selectors that know about the entity cache
 * @type {?}
 */
var advancedPaginationSelectors = (/**
 * @template Entity
 * @param {?} basicPaginationSelectors
 * @param {?} selectEntityMap
 * @return {?}
 */
function (basicPaginationSelectors, selectEntityMap) {
    return {
        page: createSelector(basicPaginationSelectors.currentPageIds, selectEntityMap, (/**
         * @param {?} ids
         * @param {?} entityMap
         * @return {?}
         */
        function (ids, entityMap) {
            if (!ids || !entityMap) {
                return null;
            }
            return ids.reduce((/**
             * @param {?} a
             * @param {?} id
             * @return {?}
             */
            function (a, id) {
                if (id in entityMap) {
                    a.push(entityMap[id]);
                }
                return a;
            }), []);
        })),
        all: createSelector(basicPaginationSelectors.allIds, selectEntityMap, (/**
         * @param {?} allIds
         * @param {?} entityMap
         * @return {?}
         */
        function (allIds, entityMap) {
            if (!allIds || !entityMap) {
                return null;
            }
            return allIds.map((/**
             * @param {?} id
             * @return {?}
             */
            function (id) { return entityMap[id]; }));
        })),
    };
});
var ɵ2 = advancedPaginationSelectors;
/** @type {?} */
export var allPaginationSelectors = (/**
 * @template Entity
 * @param {?} contextId
 * @param {?} selectEntityMap
 * @return {?}
 */
function (contextId, selectEntityMap) {
    /** @type {?} */
    var basicSelectors = basicPaginationSelectors(contextId);
    /** @type {?} */
    var advancedSelectors = advancedPaginationSelectors(basicSelectors, selectEntityMap);
    return tslib_1.__assign({}, basicSelectors, advancedSelectors);
});
/** @type {?} */
export var allPaginationObservables = (/**
 * @template Entity
 * @param {?} store
 * @param {?} allSelectors
 * @return {?}
 */
function (store, allSelectors) {
    /** @type {?} */
    var sel = (/**
     * @template A
     * @param {?} selector
     * @return {?}
     */
    function (selector) { return store.pipe(select(selector)); });
    return mapValues(allSelectors, sel);
});
export { ɵ0, ɵ1, ɵ2 };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2VsZWN0b3JzLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmdyeC1kYXRhLXBhZ2luYXRpb24vIiwic291cmNlcyI6WyJsaWIvcGFnaW5hdGlvbi9zdG9yZS1pbnRlcmZhY2VzL25ncngvc2VsZWN0b3JzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsT0FBTyxFQUNMLHFCQUFxQixFQUNyQixjQUFjLEVBQ2QsTUFBTSxHQUdQLE1BQU0sYUFBYSxDQUFDO0FBRXJCLE9BQU8sRUFBb0IsZ0JBQWdCLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUUzRSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0scUJBQXFCLENBQUM7Ozs7O0FBR3RELGlDQUdDOzs7SUFGQyxrQ0FBc0I7O0lBQ3RCLGlDQUFxQjs7O0lBK0JqQixTQUFTOzs7Ozs7QUFBRyxVQUFJLEdBQVEsRUFBRSxDQUFNOzs7UUFDOUIsTUFBTSxHQUFHLEVBQUU7O1FBRWpCLEtBQWdCLElBQUEsS0FBQSxpQkFBQSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBLGdCQUFBLDRCQUFFO1lBQTdCLElBQU0sQ0FBQyxXQUFBO1lBQ1YsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN2Qjs7Ozs7Ozs7O0lBRUQsT0FBTyxtQkFBQSxNQUFNLEVBQU8sQ0FBQztBQUN2QixDQUFDLENBQUE7Ozs7OztJQUtLLHdCQUF3Qjs7OztBQUFHLFVBQy9CLFNBQWlCOztRQUVYLGVBQWUsR0FBRyxxQkFBcUIsQ0FDM0MsZUFBZSxDQUNoQjs7UUFDSyxZQUFZLEdBQUcsY0FBYyxDQUNqQyxlQUFlOzs7O0lBQ2YsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxFQUFyQixDQUFxQixFQUMzQjs7UUFFSyxlQUFlOzs7OztJQUFHLFVBQUksQ0FBbUM7UUFDN0QsT0FBQSxjQUFjLENBQUMsWUFBWSxFQUFFLENBQUMsQ0FBQztJQUEvQixDQUErQixDQUFBO0lBRWpDLE9BQU8sU0FBUyxDQUFDLGdCQUFnQixFQUFFLGVBQWUsQ0FBQyxDQUFDO0FBQ3RELENBQUMsQ0FBQTs7Ozs7O0lBS0ssMkJBQTJCOzs7Ozs7QUFBRyxVQUNsQyx3QkFBc0QsRUFDdEQsZUFBa0Q7SUFFbEQsT0FBTztRQUNMLElBQUksRUFBRSxjQUFjLENBQ2xCLHdCQUF3QixDQUFDLGNBQWMsRUFDdkMsZUFBZTs7Ozs7UUFDZixVQUFDLEdBQUcsRUFBRSxTQUFTO1lBQ2IsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLFNBQVMsRUFBRTtnQkFDdEIsT0FBTyxJQUFJLENBQUM7YUFDYjtZQUNELE9BQU8sR0FBRyxDQUFDLE1BQU07Ozs7O1lBQUMsVUFBQyxDQUFDLEVBQUUsRUFBRTtnQkFDdEIsSUFBSSxFQUFFLElBQUksU0FBUyxFQUFFO29CQUNuQixDQUFDLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO2lCQUN2QjtnQkFDRCxPQUFPLENBQUMsQ0FBQztZQUNYLENBQUMsR0FBRSxFQUFFLENBQUMsQ0FBQztRQUNULENBQUMsRUFDRjtRQUNELEdBQUcsRUFBRSxjQUFjLENBQ2pCLHdCQUF3QixDQUFDLE1BQU0sRUFDL0IsZUFBZTs7Ozs7UUFDZixVQUFDLE1BQU0sRUFBRSxTQUFTO1lBQ2hCLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxTQUFTLEVBQUU7Z0JBQ3pCLE9BQU8sSUFBSSxDQUFDO2FBQ2I7WUFDRCxPQUFPLE1BQU0sQ0FBQyxHQUFHOzs7O1lBQUMsVUFBQSxFQUFFLElBQUksT0FBQSxTQUFTLENBQUMsRUFBRSxDQUFDLEVBQWIsQ0FBYSxFQUFDLENBQUM7UUFDekMsQ0FBQyxFQUNGO0tBQ0YsQ0FBQztBQUNKLENBQUMsQ0FBQTs7O0FBRUQsTUFBTSxLQUFPLHNCQUFzQjs7Ozs7O0FBQUcsVUFDcEMsU0FBaUIsRUFDakIsZUFBa0Q7O1FBRTVDLGNBQWMsR0FBRyx3QkFBd0IsQ0FBQyxTQUFTLENBQUM7O1FBQ3BELGlCQUFpQixHQUFHLDJCQUEyQixDQUNuRCxjQUFjLEVBQ2QsZUFBZSxDQUNoQjtJQUNELDRCQUNLLGNBQWMsRUFDZCxpQkFBaUIsRUFDcEI7QUFDSixDQUFDLENBQUE7O0FBRUQsTUFBTSxLQUFPLHdCQUF3Qjs7Ozs7O0FBQUcsVUFDdEMsS0FBaUIsRUFDakIsWUFBZ0Q7O1FBRTFDLEdBQUc7Ozs7O0lBQUcsVUFBSSxRQUEwQixJQUFLLE9BQUEsS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBNUIsQ0FBNEIsQ0FBQTtJQUMzRSxPQUFPLFNBQVMsQ0FBQyxZQUFZLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDdEMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGljdGlvbmFyeSB9IGZyb20gJ0BuZ3J4L2VudGl0eSc7XG5pbXBvcnQge1xuICBjcmVhdGVGZWF0dXJlU2VsZWN0b3IsXG4gIGNyZWF0ZVNlbGVjdG9yLFxuICBzZWxlY3QsXG4gIFNlbGVjdG9yLFxuICBTdG9yZSxcbn0gZnJvbSAnQG5ncngvc3RvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQ29udGV4dFNlbGVjdG9ycywgY29udGV4dFNlbGVjdG9ycyB9IGZyb20gJy4uLy4uL3N0b3JlL3NlbGVjdG9ycyc7XG5pbXBvcnQgeyBQYWdpbmF0aW9uQ29udGV4dFN0YXRlLCBQYWdpbmF0aW9uU3RhdGUgfSBmcm9tICcuLi8uLi9zdG9yZS9zdGF0ZSc7XG5pbXBvcnQgeyBkZWZhdWx0U3RvcmVLZXkgfSBmcm9tICcuL2RlZmF1bHQtc3RvcmUta2V5JztcblxuLy8gVGhlc2Ugc2VsZWN0aW9ucyByZXF1aXJlIGtub3dsZWRnZSBvZiB0aGUgZW50aXR5IGNhY2hlXG5pbnRlcmZhY2UgQWR2YW5jZWRTZWxlY3Rpb25zPEVudGl0eT4ge1xuICBwYWdlOiBFbnRpdHlbXSB8IG51bGw7XG4gIGFsbDogRW50aXR5W10gfCBudWxsO1xufVxuXG5leHBvcnQgdHlwZSBCYXNpY05ncnhQYWdpbmF0aW9uU2VsZWN0b3JzID0ge1xuICBbSyBpbiBrZXlvZiBDb250ZXh0U2VsZWN0b3JzXTogU2VsZWN0b3I8YW55LCBSZXR1cm5UeXBlPENvbnRleHRTZWxlY3RvcnNbS10+Pjtcbn07XG5cbnR5cGUgQWR2YW5jZWROZ3J4UGFnaW5hdGlvblNlbGVjdG9yczxFbnRpdHk+ID0ge1xuICBbSyBpbiBrZXlvZiBBZHZhbmNlZFNlbGVjdGlvbnM8RW50aXR5Pl06IFNlbGVjdG9yPFxuICAgIGFueSxcbiAgICBBZHZhbmNlZFNlbGVjdGlvbnM8RW50aXR5PltLXVxuICA+O1xufTtcblxuZXhwb3J0IHR5cGUgQWxsTmdyeFBhZ2luYXRpb25TZWxlY3RvcnM8RW50aXR5PiA9IEJhc2ljTmdyeFBhZ2luYXRpb25TZWxlY3RvcnMgJlxuICBBZHZhbmNlZE5ncnhQYWdpbmF0aW9uU2VsZWN0b3JzPEVudGl0eT47XG5cbmV4cG9ydCB0eXBlIEJhc2ljTmdyeFBhZ2luYXRpb25PYnNlcnZhYmxlcyA9IHtcbiAgW0sgaW4ga2V5b2YgQ29udGV4dFNlbGVjdG9yc106IE9ic2VydmFibGU8UmV0dXJuVHlwZTxDb250ZXh0U2VsZWN0b3JzW0tdPj47XG59O1xuXG50eXBlIEFkdmFuY2VkTmdyeFBhZ2luYXRpb25PYnNlcnZhYmxlczxFbnRpdHk+ID0ge1xuICBbSyBpbiBrZXlvZiBBZHZhbmNlZFNlbGVjdGlvbnM8RW50aXR5Pl06IE9ic2VydmFibGU8XG4gICAgQWR2YW5jZWRTZWxlY3Rpb25zPEVudGl0eT5bS11cbiAgPjtcbn07XG5cbmV4cG9ydCB0eXBlIEFsbE5ncnhQYWdpbmF0aW9uT2JzZXJ2YWJsZXM8XG4gIEVudGl0eVxuPiA9IEJhc2ljTmdyeFBhZ2luYXRpb25PYnNlcnZhYmxlcyAmIEFkdmFuY2VkTmdyeFBhZ2luYXRpb25PYnNlcnZhYmxlczxFbnRpdHk+O1xuXG5jb25zdCBtYXBWYWx1ZXMgPSA8QT4ob2JqOiBhbnksIGY6IGFueSk6IHsgW0sgaW4ga2V5b2YgQV06IGFueSB9ID0+IHtcbiAgY29uc3QgcmVzdWx0ID0ge307XG5cbiAgZm9yIChjb25zdCBrIG9mIE9iamVjdC5rZXlzKG9iaikpIHtcbiAgICByZXN1bHRba10gPSBmKG9ialtrXSk7XG4gIH1cblxuICByZXR1cm4gcmVzdWx0IGFzIGFueTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBwYWdpbmF0aW9uIHNlbGVjdG9ycyB0aGF0IG9ubHkga25vdyBhYm91dCB0aGUgcGFnaW5hdGlvbiBzdGF0ZVxuICovXG5jb25zdCBiYXNpY1BhZ2luYXRpb25TZWxlY3RvcnMgPSAoXG4gIGNvbnRleHRJZDogc3RyaW5nLFxuKTogQmFzaWNOZ3J4UGFnaW5hdGlvblNlbGVjdG9ycyA9PiB7XG4gIGNvbnN0IHBhZ2luYXRpb25TdGF0ZSA9IGNyZWF0ZUZlYXR1cmVTZWxlY3RvcjxQYWdpbmF0aW9uU3RhdGU+KFxuICAgIGRlZmF1bHRTdG9yZUtleSxcbiAgKTtcbiAgY29uc3QgY29udGV4dFN0YXRlID0gY3JlYXRlU2VsZWN0b3IoXG4gICAgcGFnaW5hdGlvblN0YXRlLFxuICAgIHMgPT4gcy5jb250ZXh0c1tjb250ZXh0SWRdLFxuICApO1xuXG4gIGNvbnN0IGNvbnRleHRTZWxlY3RvciA9IDxBPihmOiAoczogUGFnaW5hdGlvbkNvbnRleHRTdGF0ZSkgPT4gQSkgPT5cbiAgICBjcmVhdGVTZWxlY3Rvcihjb250ZXh0U3RhdGUsIGYpO1xuXG4gIHJldHVybiBtYXBWYWx1ZXMoY29udGV4dFNlbGVjdG9ycywgY29udGV4dFNlbGVjdG9yKTtcbn07XG5cbi8qKlxuICogQ3JlYXRlcyBzZWxlY3RvcnMgdGhhdCBrbm93IGFib3V0IHRoZSBlbnRpdHkgY2FjaGVcbiAqL1xuY29uc3QgYWR2YW5jZWRQYWdpbmF0aW9uU2VsZWN0b3JzID0gPEVudGl0eT4oXG4gIGJhc2ljUGFnaW5hdGlvblNlbGVjdG9yczogQmFzaWNOZ3J4UGFnaW5hdGlvblNlbGVjdG9ycyxcbiAgc2VsZWN0RW50aXR5TWFwOiBTZWxlY3RvcjxhbnksIERpY3Rpb25hcnk8RW50aXR5Pj4sXG4pOiBBZHZhbmNlZE5ncnhQYWdpbmF0aW9uU2VsZWN0b3JzPEVudGl0eT4gPT4ge1xuICByZXR1cm4ge1xuICAgIHBhZ2U6IGNyZWF0ZVNlbGVjdG9yKFxuICAgICAgYmFzaWNQYWdpbmF0aW9uU2VsZWN0b3JzLmN1cnJlbnRQYWdlSWRzLFxuICAgICAgc2VsZWN0RW50aXR5TWFwLFxuICAgICAgKGlkcywgZW50aXR5TWFwKSA9PiB7XG4gICAgICAgIGlmICghaWRzIHx8ICFlbnRpdHlNYXApIHtcbiAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gaWRzLnJlZHVjZSgoYSwgaWQpID0+IHtcbiAgICAgICAgICBpZiAoaWQgaW4gZW50aXR5TWFwKSB7XG4gICAgICAgICAgICBhLnB1c2goZW50aXR5TWFwW2lkXSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBhO1xuICAgICAgICB9LCBbXSk7XG4gICAgICB9LFxuICAgICksXG4gICAgYWxsOiBjcmVhdGVTZWxlY3RvcihcbiAgICAgIGJhc2ljUGFnaW5hdGlvblNlbGVjdG9ycy5hbGxJZHMsXG4gICAgICBzZWxlY3RFbnRpdHlNYXAsXG4gICAgICAoYWxsSWRzLCBlbnRpdHlNYXApID0+IHtcbiAgICAgICAgaWYgKCFhbGxJZHMgfHwgIWVudGl0eU1hcCkge1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhbGxJZHMubWFwKGlkID0+IGVudGl0eU1hcFtpZF0pO1xuICAgICAgfSxcbiAgICApLFxuICB9O1xufTtcblxuZXhwb3J0IGNvbnN0IGFsbFBhZ2luYXRpb25TZWxlY3RvcnMgPSA8RW50aXR5PihcbiAgY29udGV4dElkOiBzdHJpbmcsXG4gIHNlbGVjdEVudGl0eU1hcDogU2VsZWN0b3I8YW55LCBEaWN0aW9uYXJ5PEVudGl0eT4+LFxuKSA9PiB7XG4gIGNvbnN0IGJhc2ljU2VsZWN0b3JzID0gYmFzaWNQYWdpbmF0aW9uU2VsZWN0b3JzKGNvbnRleHRJZCk7XG4gIGNvbnN0IGFkdmFuY2VkU2VsZWN0b3JzID0gYWR2YW5jZWRQYWdpbmF0aW9uU2VsZWN0b3JzKFxuICAgIGJhc2ljU2VsZWN0b3JzLFxuICAgIHNlbGVjdEVudGl0eU1hcCxcbiAgKTtcbiAgcmV0dXJuIHtcbiAgICAuLi5iYXNpY1NlbGVjdG9ycyxcbiAgICAuLi5hZHZhbmNlZFNlbGVjdG9ycyxcbiAgfTtcbn07XG5cbmV4cG9ydCBjb25zdCBhbGxQYWdpbmF0aW9uT2JzZXJ2YWJsZXMgPSA8RW50aXR5PihcbiAgc3RvcmU6IFN0b3JlPGFueT4sXG4gIGFsbFNlbGVjdG9yczogQWxsTmdyeFBhZ2luYXRpb25TZWxlY3RvcnM8RW50aXR5Pixcbik6IEFsbE5ncnhQYWdpbmF0aW9uT2JzZXJ2YWJsZXM8RW50aXR5PiA9PiB7XG4gIGNvbnN0IHNlbCA9IDxBPihzZWxlY3RvcjogU2VsZWN0b3I8YW55LCBBPikgPT4gc3RvcmUucGlwZShzZWxlY3Qoc2VsZWN0b3IpKTtcbiAgcmV0dXJuIG1hcFZhbHVlcyhhbGxTZWxlY3RvcnMsIHNlbCk7XG59O1xuIl19