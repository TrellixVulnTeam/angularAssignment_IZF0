/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Store } from '@ngrx/store';
import { defaultStoreKey } from './default-store-key';
import { Pagination } from './pagination';
/**
 * @record
 * @template Entity, NextPageState
 */
export function PaginationFactoryArgs() { }
if (false) {
    /** @type {?|undefined} */
    PaginationFactoryArgs.prototype.contextId;
    /** @type {?} */
    PaginationFactoryArgs.prototype.paginationFunction;
    /** @type {?} */
    PaginationFactoryArgs.prototype.entityService;
    /** @type {?|undefined} */
    PaginationFactoryArgs.prototype.addToCache;
}
var PaginationFactory = /** @class */ (function () {
    function PaginationFactory(store) {
        this.store = store;
        this.counter = 0;
    }
    /**
     * @template Entity, NextPageState
     * @param {?} __0
     * @return {?}
     */
    PaginationFactory.prototype.create = /**
     * @template Entity, NextPageState
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var entityService = _a.entityService, paginationFunction = _a.paginationFunction, _b = _a.addToCache, addToCache = _b === void 0 ? true : _b, _c = _a.contextId, contextId = _c === void 0 ? entityService.entityName + "-" + this.counter++ : _c;
        return new Pagination(contextId, paginationFunction, entityService, this.store, defaultStoreKey, addToCache);
    };
    PaginationFactory.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    PaginationFactory.ctorParameters = function () { return [
        { type: Store }
    ]; };
    return PaginationFactory;
}());
export { PaginationFactory };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PaginationFactory.prototype.counter;
    /**
     * @type {?}
     * @private
     */
    PaginationFactory.prototype.store;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnaW5hdGlvbi1mYWN0b3J5LnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3J4LWRhdGEtcGFnaW5hdGlvbi8iLCJzb3VyY2VzIjpbImxpYi9wYWdpbmF0aW9uL3N0b3JlLWludGVyZmFjZXMvbmdyeC9wYWdpbmF0aW9uLWZhY3Rvcnkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sYUFBYSxDQUFDO0FBR3BDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxxQkFBcUIsQ0FBQztBQUN0RCxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDOzs7OztBQUUxQywyQ0FRQzs7O0lBSkMsMENBQW1COztJQUNuQixtREFBd0U7O0lBQ3hFLDhDQUF3RDs7SUFDeEQsMkNBQXFCOztBQUd2QjtJQUlFLDJCQUFvQixLQUFpQjtRQUFqQixVQUFLLEdBQUwsS0FBSyxDQUFZO1FBRjdCLFlBQU8sR0FBRyxDQUFDLENBQUM7SUFFb0IsQ0FBQzs7Ozs7O0lBRXpDLGtDQUFNOzs7OztJQUFOLFVBQWdELEVBS0Q7WUFKN0MsZ0NBQWEsRUFDYiwwQ0FBa0IsRUFDbEIsa0JBQWlCLEVBQWpCLHNDQUFpQixFQUNqQixpQkFBMkQsRUFBM0QsZ0ZBQTJEO1FBSzNELE9BQU8sSUFBSSxVQUFVLENBQ25CLFNBQVMsRUFDVCxrQkFBa0IsRUFDbEIsYUFBYSxFQUNiLElBQUksQ0FBQyxLQUFLLEVBQ1YsZUFBZSxFQUNmLFVBQVUsQ0FDWCxDQUFDO0lBQ0osQ0FBQzs7Z0JBdkJGLFVBQVU7Ozs7Z0JBaEJGLEtBQUs7O0lBd0NkLHdCQUFDO0NBQUEsQUF4QkQsSUF3QkM7U0F2QlksaUJBQWlCOzs7Ozs7SUFDNUIsb0NBQW9COzs7OztJQUVSLGtDQUF5QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEVudGl0eUNvbGxlY3Rpb25TZXJ2aWNlQmFzZSB9IGZyb20gJ0BuZ3J4L2RhdGEnO1xuaW1wb3J0IHsgU3RvcmUgfSBmcm9tICdAbmdyeC9zdG9yZSc7XG5pbXBvcnQgeyBBbnlFbnRpdHkgfSBmcm9tICcuLi8uLi9lbnRpdHknO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZVBhZ2luYXRpb25GdW5jdGlvbiB9IGZyb20gJy4uLy4uL2l0ZXJhdG9yL3BhZ2luYXRpb24tZnVuY3Rpb24nO1xuaW1wb3J0IHsgZGVmYXVsdFN0b3JlS2V5IH0gZnJvbSAnLi9kZWZhdWx0LXN0b3JlLWtleSc7XG5pbXBvcnQgeyBQYWdpbmF0aW9uIH0gZnJvbSAnLi9wYWdpbmF0aW9uJztcblxuZXhwb3J0IGludGVyZmFjZSBQYWdpbmF0aW9uRmFjdG9yeUFyZ3M8XG4gIEVudGl0eSBleHRlbmRzIEFueUVudGl0eSxcbiAgTmV4dFBhZ2VTdGF0ZVxuPiB7XG4gIGNvbnRleHRJZD86IHN0cmluZztcbiAgcGFnaW5hdGlvbkZ1bmN0aW9uOiBPYnNlcnZhYmxlUGFnaW5hdGlvbkZ1bmN0aW9uPEVudGl0eSwgTmV4dFBhZ2VTdGF0ZT47XG4gIGVudGl0eVNlcnZpY2U6IEVudGl0eUNvbGxlY3Rpb25TZXJ2aWNlQmFzZTxFbnRpdHksIGFueT47XG4gIGFkZFRvQ2FjaGU/OiBib29sZWFuO1xufVxuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUGFnaW5hdGlvbkZhY3Rvcnkge1xuICBwcml2YXRlIGNvdW50ZXIgPSAwO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc3RvcmU6IFN0b3JlPGFueT4pIHt9XG5cbiAgY3JlYXRlPEVudGl0eSBleHRlbmRzIEFueUVudGl0eSwgTmV4dFBhZ2VTdGF0ZT4oe1xuICAgIGVudGl0eVNlcnZpY2UsXG4gICAgcGFnaW5hdGlvbkZ1bmN0aW9uLFxuICAgIGFkZFRvQ2FjaGUgPSB0cnVlLFxuICAgIGNvbnRleHRJZCA9IGAke2VudGl0eVNlcnZpY2UuZW50aXR5TmFtZX0tJHt0aGlzLmNvdW50ZXIrK31gLFxuICB9OiBQYWdpbmF0aW9uRmFjdG9yeUFyZ3M8RW50aXR5LCBOZXh0UGFnZVN0YXRlPik6IFBhZ2luYXRpb248XG4gICAgRW50aXR5LFxuICAgIE5leHRQYWdlU3RhdGVcbiAgPiB7XG4gICAgcmV0dXJuIG5ldyBQYWdpbmF0aW9uKFxuICAgICAgY29udGV4dElkLFxuICAgICAgcGFnaW5hdGlvbkZ1bmN0aW9uLFxuICAgICAgZW50aXR5U2VydmljZSxcbiAgICAgIHRoaXMuc3RvcmUsXG4gICAgICBkZWZhdWx0U3RvcmVLZXksXG4gICAgICBhZGRUb0NhY2hlLFxuICAgICk7XG4gIH1cbn1cbiJdfQ==