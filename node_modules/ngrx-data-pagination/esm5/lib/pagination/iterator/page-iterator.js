/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { asyncPageGenerator } from './async-page-generator';
/**
 * @template Entity
 */
var /**
 * @template Entity
 */
PageIterator = /** @class */ (function () {
    function PageIterator(paginationFunction) {
        var _this = this;
        //  AsyncPageGenerator<Entity>;
        this.done = false;
        this.pending = false;
        this[Symbol.asyncIterator] = (/**
         * @return {?}
         */
        function () { return _this.asyncPageGenerator; });
        this.asyncPageGenerator = asyncPageGenerator(paginationFunction);
    }
    /**
     * @return {?}
     */
    PageIterator.prototype.getNextPage = /**
     * @return {?}
     */
    function () {
        return tslib_1.__awaiter(this, void 0, void 0, function () {
            var _a, value, done;
            return tslib_1.__generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this.pending) {
                            throw new Error('cannot queue pages (yet)');
                        }
                        if (this.done) {
                            throw new Error('This PageIterator is done. Try creating a new one');
                        }
                        this.pending = true;
                        return [4 /*yield*/, this.asyncPageGenerator.next()];
                    case 1:
                        _a = _b.sent(), value = _a.value, done = _a.done;
                        this.pending = false;
                        this.done = done;
                        return [2 /*return*/, value];
                }
            });
        });
    };
    return PageIterator;
}());
/**
 * @template Entity
 */
export { PageIterator };
if (false) {
    /**
     * @type {?}
     * @private
     */
    PageIterator.prototype.asyncPageGenerator;
    /** @type {?} */
    PageIterator.prototype.done;
    /**
     * @type {?}
     * @private
     */
    PageIterator.prototype.pending;
    /* Skipping unnamed member:
    [Symbol.asyncIterator] = () => this.asyncPageGenerator;*/
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGFnZS1pdGVyYXRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ncngtZGF0YS1wYWdpbmF0aW9uLyIsInNvdXJjZXMiOlsibGliL3BhZ2luYXRpb24vaXRlcmF0b3IvcGFnZS1pdGVyYXRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLHdCQUF3QixDQUFDOzs7O0FBRzVEOzs7O0lBS0Usc0JBQVksa0JBQThDO1FBQTFELGlCQUVDOztRQUxNLFNBQUksR0FBRyxLQUFLLENBQUM7UUFDWixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBd0J4QixLQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7OztRQUFHLGNBQU0sT0FBQSxLQUFJLENBQUMsa0JBQWtCLEVBQXZCLENBQXVCLEVBQUM7UUFyQnJELElBQUksQ0FBQyxrQkFBa0IsR0FBRyxrQkFBa0IsQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDO0lBQ25FLENBQUM7Ozs7SUFFSyxrQ0FBVzs7O0lBQWpCOzs7Ozs7d0JBQ0UsSUFBSSxJQUFJLENBQUMsT0FBTyxFQUFFOzRCQUNoQixNQUFNLElBQUksS0FBSyxDQUFDLDBCQUEwQixDQUFDLENBQUM7eUJBQzdDO3dCQUVELElBQUksSUFBSSxDQUFDLElBQUksRUFBRTs0QkFDYixNQUFNLElBQUksS0FBSyxDQUFDLG1EQUFtRCxDQUFDLENBQUM7eUJBQ3RFO3dCQUVELElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxDQUFDO3dCQUVJLHFCQUFNLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLEVBQUUsRUFBQTs7d0JBQXRELEtBQWtCLFNBQW9DLEVBQXBELEtBQUssV0FBQSxFQUFFLElBQUksVUFBQTt3QkFFbkIsSUFBSSxDQUFDLE9BQU8sR0FBRyxLQUFLLENBQUM7d0JBQ3JCLElBQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO3dCQUNqQixzQkFBTyxLQUFLLEVBQUM7Ozs7S0FDZDtJQUdILG1CQUFDO0FBQUQsQ0FBQyxBQTVCRCxJQTRCQzs7Ozs7Ozs7OztJQTNCQywwQ0FBZ0M7O0lBQ2hDLDRCQUFvQjs7Ozs7SUFDcEIsK0JBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXN5bmNQYWdlR2VuZXJhdG9yIH0gZnJvbSAnLi9hc3luYy1wYWdlLWdlbmVyYXRvcic7XG5pbXBvcnQgeyBQYWdpbmF0aW9uRnVuY3Rpb24gfSBmcm9tICcuL3BhZ2luYXRpb24tZnVuY3Rpb24nO1xuXG5leHBvcnQgY2xhc3MgUGFnZUl0ZXJhdG9yPEVudGl0eT4ge1xuICBwcml2YXRlIGFzeW5jUGFnZUdlbmVyYXRvcjogYW55OyAvLyAgQXN5bmNQYWdlR2VuZXJhdG9yPEVudGl0eT47XG4gIHB1YmxpYyBkb25lID0gZmFsc2U7XG4gIHByaXZhdGUgcGVuZGluZyA9IGZhbHNlO1xuXG4gIGNvbnN0cnVjdG9yKHBhZ2luYXRpb25GdW5jdGlvbjogUGFnaW5hdGlvbkZ1bmN0aW9uPEVudGl0eT4pIHtcbiAgICB0aGlzLmFzeW5jUGFnZUdlbmVyYXRvciA9IGFzeW5jUGFnZUdlbmVyYXRvcihwYWdpbmF0aW9uRnVuY3Rpb24pO1xuICB9XG5cbiAgYXN5bmMgZ2V0TmV4dFBhZ2UoKTogUHJvbWlzZTxFbnRpdHlbXT4ge1xuICAgIGlmICh0aGlzLnBlbmRpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignY2Fubm90IHF1ZXVlIHBhZ2VzICh5ZXQpJyk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdUaGlzIFBhZ2VJdGVyYXRvciBpcyBkb25lLiBUcnkgY3JlYXRpbmcgYSBuZXcgb25lJyk7XG4gICAgfVxuXG4gICAgdGhpcy5wZW5kaW5nID0gdHJ1ZTtcblxuICAgIGNvbnN0IHsgdmFsdWUsIGRvbmUgfSA9IGF3YWl0IHRoaXMuYXN5bmNQYWdlR2VuZXJhdG9yLm5leHQoKTtcblxuICAgIHRoaXMucGVuZGluZyA9IGZhbHNlO1xuICAgIHRoaXMuZG9uZSA9IGRvbmU7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSA9ICgpID0+IHRoaXMuYXN5bmNQYWdlR2VuZXJhdG9yO1xufVxuIl19