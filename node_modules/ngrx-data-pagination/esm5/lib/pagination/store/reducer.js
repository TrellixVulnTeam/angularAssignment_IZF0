/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { PaginationActionType as T } from './actions';
import { contextSelectors } from './selectors';
import { defaultPaginationContextState, defaultPaginationState, } from './state';
/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function paginationContextReducer(state, action) {
    if (state === void 0) { state = defaultPaginationContextState; }
    switch (action.type) {
        case T.RESET_PAGINATION_STATE:
            return defaultPaginationContextState;
        case T.GET_NEXT_PAGE:
            return tslib_1.__assign({}, state, { loadingNewPage: true, progressionCancelled: false });
        case T.GET_NEXT_PAGE_SUCCESS:
            return tslib_1.__assign({}, state, { loadingNewPage: false, pages: tslib_1.__spread(state.pages, [action.entityIds]), currentPage: state.progressionCancelled
                    ? state.currentPage
                    : state.currentPage + 1, done: action.done, progressionCancelled: false });
        case T.GET_NEXT_PAGE_EMPTY:
            /** @type {?} */
            var isFirstFetchedPage = (state.pages.length === 0);
            return tslib_1.__assign({}, state, { loadingNewPage: false, pages: isFirstFetchedPage ? [[]] : tslib_1.__spread(state.pages), currentPage: state.progressionCancelled && !isFirstFetchedPage
                    ? state.currentPage
                    : state.currentPage + 1, done: true, progressionCancelled: false });
        case T.PREV_PAGE:
            return tslib_1.__assign({}, state, { currentPage: state.currentPage - 1, progressionCancelled: contextSelectors.nextPageLoading(state) });
        case T.NEXT_PAGE:
            return tslib_1.__assign({}, state, { currentPage: state.currentPage + 1 });
        default:
            return state;
    }
}
/**
 * @param {?=} state
 * @param {?=} action
 * @return {?}
 */
export function paginationReducer(state, action) {
    var _a;
    if (state === void 0) { state = defaultPaginationState; }
    if (!action || !action.type.startsWith('[mb-Pagination]')) {
        return state;
    }
    return tslib_1.__assign({}, state, { contexts: tslib_1.__assign({}, state.contexts, (_a = {}, _a[action.contextId] = paginationContextReducer(state.contexts[action.contextId], action), _a)) });
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVkdWNlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25ncngtZGF0YS1wYWdpbmF0aW9uLyIsInNvdXJjZXMiOlsibGliL3BhZ2luYXRpb24vc3RvcmUvcmVkdWNlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBb0Isb0JBQW9CLElBQUksQ0FBQyxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ3hFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGFBQWEsQ0FBQztBQUMvQyxPQUFPLEVBQ0wsNkJBQTZCLEVBQzdCLHNCQUFzQixHQUd2QixNQUFNLFNBQVMsQ0FBQzs7Ozs7O0FBRWpCLE1BQU0sVUFBVSx3QkFBd0IsQ0FDdEMsS0FBNkQsRUFDN0QsTUFBd0I7SUFEeEIsc0JBQUEsRUFBQSxxQ0FBNkQ7SUFHN0QsUUFBUSxNQUFNLENBQUMsSUFBSSxFQUFFO1FBQ25CLEtBQUssQ0FBQyxDQUFDLHNCQUFzQjtZQUMzQixPQUFPLDZCQUE2QixDQUFDO1FBRXZDLEtBQUssQ0FBQyxDQUFDLGFBQWE7WUFDbEIsNEJBQ0ssS0FBSyxJQUNSLGNBQWMsRUFBRSxJQUFJLEVBQ3BCLG9CQUFvQixFQUFFLEtBQUssSUFDM0I7UUFFSixLQUFLLENBQUMsQ0FBQyxxQkFBcUI7WUFDMUIsNEJBQ0ssS0FBSyxJQUNSLGNBQWMsRUFBRSxLQUFLLEVBQ3JCLEtBQUssbUJBQU0sS0FBSyxDQUFDLEtBQUssR0FBRSxNQUFNLENBQUMsU0FBUyxJQUN4QyxXQUFXLEVBQUUsS0FBSyxDQUFDLG9CQUFvQjtvQkFDckMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXO29CQUNuQixDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxDQUFDLEVBQ3pCLElBQUksRUFBRSxNQUFNLENBQUMsSUFBSSxFQUNqQixvQkFBb0IsRUFBRSxLQUFLLElBQzNCO1FBRUosS0FBSyxDQUFDLENBQUMsbUJBQW1COztnQkFDbEIsa0JBQWtCLEdBQUcsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7WUFDckQsNEJBQ0ssS0FBSyxJQUNSLGNBQWMsRUFBRSxLQUFLLEVBQ3JCLEtBQUssRUFBRSxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLGtCQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFDbkQsV0FBVyxFQUFFLEtBQUssQ0FBQyxvQkFBb0IsSUFBSSxDQUFDLGtCQUFrQjtvQkFDNUQsQ0FBQyxDQUFDLEtBQUssQ0FBQyxXQUFXO29CQUNuQixDQUFDLENBQUMsS0FBSyxDQUFDLFdBQVcsR0FBRyxDQUFDLEVBQ3pCLElBQUksRUFBRSxJQUFJLEVBQ1Ysb0JBQW9CLEVBQUUsS0FBSyxJQUMzQjtRQUVKLEtBQUssQ0FBQyxDQUFDLFNBQVM7WUFDZCw0QkFDSyxLQUFLLElBQ1IsV0FBVyxFQUFFLEtBQUssQ0FBQyxXQUFXLEdBQUcsQ0FBQyxFQUdsQyxvQkFBb0IsRUFBRSxnQkFBZ0IsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLElBQzdEO1FBRUosS0FBSyxDQUFDLENBQUMsU0FBUztZQUNkLDRCQUNLLEtBQUssSUFDUixXQUFXLEVBQUUsS0FBSyxDQUFDLFdBQVcsR0FBRyxDQUFDLElBQ2xDO1FBRUo7WUFDRSxPQUFPLEtBQUssQ0FBQztLQUNoQjtBQUNILENBQUM7Ozs7OztBQUVELE1BQU0sVUFBVSxpQkFBaUIsQ0FDL0IsS0FBK0MsRUFDL0MsTUFBd0I7O0lBRHhCLHNCQUFBLEVBQUEsOEJBQStDO0lBRy9DLElBQUksQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxpQkFBaUIsQ0FBQyxFQUFFO1FBQ3pELE9BQU8sS0FBSyxDQUFDO0tBQ2Q7SUFFRCw0QkFDSyxLQUFLLElBQ1IsUUFBUSx1QkFDSCxLQUFLLENBQUMsUUFBUSxlQUNoQixNQUFNLENBQUMsU0FBUyxJQUFHLHdCQUF3QixDQUMxQyxLQUFLLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsRUFDaEMsTUFBTSxDQUNQLFVBRUg7QUFDSixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGFnaW5hdGlvbkFjdGlvbiwgUGFnaW5hdGlvbkFjdGlvblR5cGUgYXMgVCB9IGZyb20gJy4vYWN0aW9ucyc7XG5pbXBvcnQgeyBjb250ZXh0U2VsZWN0b3JzIH0gZnJvbSAnLi9zZWxlY3RvcnMnO1xuaW1wb3J0IHtcbiAgZGVmYXVsdFBhZ2luYXRpb25Db250ZXh0U3RhdGUsXG4gIGRlZmF1bHRQYWdpbmF0aW9uU3RhdGUsXG4gIFBhZ2luYXRpb25Db250ZXh0U3RhdGUsXG4gIFBhZ2luYXRpb25TdGF0ZSxcbn0gZnJvbSAnLi9zdGF0ZSc7XG5cbmV4cG9ydCBmdW5jdGlvbiBwYWdpbmF0aW9uQ29udGV4dFJlZHVjZXIoXG4gIHN0YXRlOiBQYWdpbmF0aW9uQ29udGV4dFN0YXRlID0gZGVmYXVsdFBhZ2luYXRpb25Db250ZXh0U3RhdGUsXG4gIGFjdGlvbjogUGFnaW5hdGlvbkFjdGlvbixcbik6IFBhZ2luYXRpb25Db250ZXh0U3RhdGUge1xuICBzd2l0Y2ggKGFjdGlvbi50eXBlKSB7XG4gICAgY2FzZSBULlJFU0VUX1BBR0lOQVRJT05fU1RBVEU6XG4gICAgICByZXR1cm4gZGVmYXVsdFBhZ2luYXRpb25Db250ZXh0U3RhdGU7XG5cbiAgICBjYXNlIFQuR0VUX05FWFRfUEFHRTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBsb2FkaW5nTmV3UGFnZTogdHJ1ZSxcbiAgICAgICAgcHJvZ3Jlc3Npb25DYW5jZWxsZWQ6IGZhbHNlLFxuICAgICAgfTtcblxuICAgIGNhc2UgVC5HRVRfTkVYVF9QQUdFX1NVQ0NFU1M6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgbG9hZGluZ05ld1BhZ2U6IGZhbHNlLFxuICAgICAgICBwYWdlczogWy4uLnN0YXRlLnBhZ2VzLCBhY3Rpb24uZW50aXR5SWRzXSxcbiAgICAgICAgY3VycmVudFBhZ2U6IHN0YXRlLnByb2dyZXNzaW9uQ2FuY2VsbGVkXG4gICAgICAgICAgPyBzdGF0ZS5jdXJyZW50UGFnZVxuICAgICAgICAgIDogc3RhdGUuY3VycmVudFBhZ2UgKyAxLFxuICAgICAgICBkb25lOiBhY3Rpb24uZG9uZSxcbiAgICAgICAgcHJvZ3Jlc3Npb25DYW5jZWxsZWQ6IGZhbHNlLFxuICAgICAgfTtcblxuICAgIGNhc2UgVC5HRVRfTkVYVF9QQUdFX0VNUFRZOlxuICAgICAgY29uc3QgaXNGaXJzdEZldGNoZWRQYWdlID0gKHN0YXRlLnBhZ2VzLmxlbmd0aCA9PT0gMCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgbG9hZGluZ05ld1BhZ2U6IGZhbHNlLFxuICAgICAgICBwYWdlczogaXNGaXJzdEZldGNoZWRQYWdlID8gW1tdXSA6IFsuLi5zdGF0ZS5wYWdlc10sXG4gICAgICAgIGN1cnJlbnRQYWdlOiBzdGF0ZS5wcm9ncmVzc2lvbkNhbmNlbGxlZCAmJiAhaXNGaXJzdEZldGNoZWRQYWdlXG4gICAgICAgICAgPyBzdGF0ZS5jdXJyZW50UGFnZVxuICAgICAgICAgIDogc3RhdGUuY3VycmVudFBhZ2UgKyAxLFxuICAgICAgICBkb25lOiB0cnVlLFxuICAgICAgICBwcm9ncmVzc2lvbkNhbmNlbGxlZDogZmFsc2UsXG4gICAgICB9O1xuXG4gICAgY2FzZSBULlBSRVZfUEFHRTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBjdXJyZW50UGFnZTogc3RhdGUuY3VycmVudFBhZ2UgLSAxLFxuICAgICAgICAvLyBJZiB0aGUgbmV4dCBwYWdlIGlzIGxvYWRpbmcgd2hlbiB0aGUgdXNlciBnb2VzIGJhY2ssXG4gICAgICAgIC8vIGRvbid0IHByb2dyZXNzIHRoZSBwYWdlIG51bWJlciB3aGVuIHRoZSBwYWdlIGNvbWVzIGluXG4gICAgICAgIHByb2dyZXNzaW9uQ2FuY2VsbGVkOiBjb250ZXh0U2VsZWN0b3JzLm5leHRQYWdlTG9hZGluZyhzdGF0ZSksXG4gICAgICB9O1xuXG4gICAgY2FzZSBULk5FWFRfUEFHRTpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBjdXJyZW50UGFnZTogc3RhdGUuY3VycmVudFBhZ2UgKyAxLFxuICAgICAgfTtcblxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHBhZ2luYXRpb25SZWR1Y2VyKFxuICBzdGF0ZTogUGFnaW5hdGlvblN0YXRlID0gZGVmYXVsdFBhZ2luYXRpb25TdGF0ZSxcbiAgYWN0aW9uOiBQYWdpbmF0aW9uQWN0aW9uLFxuKTogUGFnaW5hdGlvblN0YXRlIHtcbiAgaWYgKCFhY3Rpb24gfHwgIWFjdGlvbi50eXBlLnN0YXJ0c1dpdGgoJ1ttYi1QYWdpbmF0aW9uXScpKSB7XG4gICAgcmV0dXJuIHN0YXRlO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5zdGF0ZSxcbiAgICBjb250ZXh0czoge1xuICAgICAgLi4uc3RhdGUuY29udGV4dHMsXG4gICAgICBbYWN0aW9uLmNvbnRleHRJZF06IHBhZ2luYXRpb25Db250ZXh0UmVkdWNlcihcbiAgICAgICAgc3RhdGUuY29udGV4dHNbYWN0aW9uLmNvbnRleHRJZF0sXG4gICAgICAgIGFjdGlvbixcbiAgICAgICksXG4gICAgfSxcbiAgfTtcbn1cbiJdfQ==