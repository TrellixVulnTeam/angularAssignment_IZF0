{"version":3,"file":"ngrx-data-pagination.js","sources":["ng://ngrx-data-pagination/lib/pagination/store-interfaces/ngrx/default-store-key.ts","ng://ngrx-data-pagination/lib/pagination/iterator/pagination-function.ts","ng://ngrx-data-pagination/lib/pagination/iterator/async-page-generator.ts","ng://ngrx-data-pagination/lib/pagination/iterator/page-iterator.ts","ng://ngrx-data-pagination/lib/pagination/store/actions.ts","ng://ngrx-data-pagination/lib/pagination/store/selectors.ts","ng://ngrx-data-pagination/lib/pagination/store/state.ts","ng://ngrx-data-pagination/lib/pagination/store-interfaces/store-pagination-context.ts","ng://ngrx-data-pagination/lib/pagination/store-interfaces/ngrx/selectors.ts","ng://ngrx-data-pagination/lib/pagination/store-interfaces/ngrx/pagination.ts","ng://ngrx-data-pagination/lib/pagination/store-interfaces/ngrx/pagination-factory.service.ts","ng://ngrx-data-pagination/lib/pagination/store/reducer.ts","ng://ngrx-data-pagination/lib/pagination/store-interfaces/ngrx/pagination.module.ts"],"sourcesContent":["export const defaultStoreKey = 'ngrxDataPagination';\n","import { Observable } from 'rxjs';\n\nexport type PaginationFunctionCurried<Entity, State, QueryOptions> = (\n  queryOptions: QueryOptions,\n) => (\n  prevState?: State,\n) => Observable<{\n  nextState: State;\n  data: Entity[];\n}>;\n\nexport interface Page<Entity, State> {\n  state: State;\n  data: Entity[];\n  done: boolean;\n}\n\nexport type PaginationFunction<Entity, State = any> = (\n  prevState?: State,\n) => Promise<Page<Entity, State>>;\n\nexport type ObservablePaginationFunction<Entity, State> = (\n  prevState?: State,\n) => Observable<Page<Entity, State>>;\n\nexport const observableToPromisePaginationFunction = <Entity, State>(\n  observableFn: ObservablePaginationFunction<Entity, State>,\n): PaginationFunction<Entity, State> => (prevState?: State) =>\n  observableFn(prevState).toPromise();\n","import { Page, PaginationFunction } from './pagination-function';\n\n// TODO fix TS setup for AsyncPageGenerator types\n\n// export type AsyncPageGenerator<Entity> = AsyncGenerator<Entity[], Entity[], any>;\n\nexport async function* asyncPageGenerator<Entity, State>(\n  paginationFunction: PaginationFunction<Entity, State>,\n) {\n  // : AsyncGenerator<Entity[], Entity[], any>\n  let page: Page<Entity, State> = {\n    data: undefined,\n    state: undefined,\n    done: false,\n  };\n\n  while (true) {\n    page = await paginationFunction(page.state);\n    if (page.done) {\n      return page.data;\n    }\n    yield page.data;\n  }\n}\n\n// export const examplePaginationFunction: PaginationFunction<number, number> = state =>\n//   Promise.resolve({ data: [state], state: state + 1, done: false, });\n\n// export const exampleAsyncPageGenerator = asyncPageGenerator(examplePaginationFunction);\n\n// const f = async () => {\n//   for await (const page of exampleAsyncPageGenerator) {\n//     console.log('page', page);\n//   }\n// };\n","import { asyncPageGenerator } from './async-page-generator';\nimport { PaginationFunction } from './pagination-function';\n\nexport class PageIterator<Entity> {\n  private asyncPageGenerator: any; //  AsyncPageGenerator<Entity>;\n  public done = false;\n  private pending = false;\n\n  constructor(paginationFunction: PaginationFunction<Entity>) {\n    this.asyncPageGenerator = asyncPageGenerator(paginationFunction);\n  }\n\n  async getNextPage(): Promise<Entity[]> {\n    if (this.pending) {\n      throw new Error('cannot queue pages (yet)');\n    }\n\n    if (this.done) {\n      throw new Error('This PageIterator is done. Try creating a new one');\n    }\n\n    this.pending = true;\n\n    const { value, done } = await this.asyncPageGenerator.next();\n\n    this.pending = false;\n    this.done = done;\n    return value;\n  }\n\n  [Symbol.asyncIterator] = () => this.asyncPageGenerator;\n}\n","import { EntityId } from '../entity';\n\nexport enum PaginationActionType {\n  RESET_PAGINATION_STATE = '[mb-Pagination] Reset Pagination State',\n  GET_NEXT_PAGE = '[mb-Pagination] Get Next Page',\n  GET_NEXT_PAGE_SUCCESS = '[mb-Pagination] Get Next Page Success',\n  GET_NEXT_PAGE_EMPTY = '[mb-Pagination] Get Next Page Empty',\n  PREV_PAGE = '[mb-Pagination] Prev Page',\n  NEXT_PAGE = '[mb-Pagination] Next Page',\n}\n\nconst T = PaginationActionType;\n\ninterface Action {\n  type: string;\n}\n\nexport interface PaginationActionT extends Action {\n  type: PaginationActionType;\n  contextId: string;\n}\n\nexport class ResetPaginationState implements PaginationActionT {\n  readonly type = T.RESET_PAGINATION_STATE;\n  constructor(public contextId: string) {}\n}\nexport class GetNextPage implements PaginationActionT {\n  readonly type = T.GET_NEXT_PAGE;\n  constructor(public contextId: string) {}\n}\nexport class GetNextPageSuccess implements PaginationActionT {\n  readonly type = T.GET_NEXT_PAGE_SUCCESS;\n  constructor(\n    public contextId: string,\n    public entityIds: EntityId[],\n    public done: boolean,\n  ) {}\n}\nexport class GetNextPageEmpty implements PaginationActionT {\n  readonly type = T.GET_NEXT_PAGE_EMPTY;\n  constructor(\n    public contextId: string\n  ) {}\n}\nexport class PrevPage implements PaginationActionT {\n  readonly type = T.PREV_PAGE;\n  constructor(public contextId: string) {}\n}\nexport class NextPage implements PaginationActionT {\n  readonly type = T.NEXT_PAGE;\n  constructor(public contextId: string) {}\n}\n\nexport type PaginationAction =\n  | ResetPaginationState\n  | GetNextPage\n  | GetNextPageSuccess\n  | GetNextPageEmpty\n  | PrevPage\n  | NextPage;\n\nexport const makeActionCreators = (contextId: string) => ({\n  ResetPaginationState: () => new ResetPaginationState(contextId),\n  GetNextPage: () => new GetNextPage(contextId),\n  GetNextPageSuccess: (entityIds: EntityId[], done: boolean) =>\n    new GetNextPageSuccess(contextId, entityIds, done),\n  GetNextPageEmpty: () => new GetNextPageEmpty(contextId),\n  PrevPage: () => new PrevPage(contextId),\n  NextPage: () => new NextPage(contextId),\n});\n\nexport const makeDispatchers = (\n  contextId: string,\n  dispatch: (action: Action) => void,\n) => {\n  const actionCreators = makeActionCreators(contextId);\n\n  return {\n    ResetPaginationState: () => dispatch(actionCreators.ResetPaginationState()),\n    GetNextPage: () => dispatch(actionCreators.GetNextPage()),\n    GetNextPageSuccess: (entityIds: EntityId[], done: boolean) =>\n      dispatch(actionCreators.GetNextPageSuccess(entityIds, done)),\n    GetNextPageEmpty: () => dispatch(actionCreators.GetNextPageEmpty()),\n    PrevPage: () => dispatch(actionCreators.PrevPage()),\n    NextPage: () => dispatch(actionCreators.NextPage()),\n  };\n};\n","import { EntityId } from '../entity';\nimport { PaginationContextState } from './state';\n\nconst finalPageIndex = ({ done, pages }: PaginationContextState): number => {\n  if (!done || !pages || !pages.length) {\n    return null;\n  }\n\n  return pages.length - 1;\n};\n\nconst flatten = <A>(arrays: A[][]): A[] => arrays.reduce((result, as) => result.concat(as))\n\nexport const contextSelectors = {\n  currentPageIds: ({\n    pages,\n    currentPage,\n  }: PaginationContextState): EntityId[] => (pages ? pages[currentPage] : null),\n  allIds: ({ pages }: PaginationContextState): EntityId[] => flatten(pages),\n  allPageIds: ({ pages }: PaginationContextState): EntityId[][] => pages,\n  nextPageLoaded: ({ pages, currentPage }: PaginationContextState): boolean =>\n    !!pages[currentPage + 1],\n  nextPageLoading: ({\n    pages,\n    currentPage,\n    loadingNewPage,\n  }: PaginationContextState): boolean => {\n    if (!Number.isInteger(currentPage)) {\n      return loadingNewPage;\n    }\n    return !pages[currentPage + 1] && loadingNewPage;\n  },\n  loadingNewPage: ({ loadingNewPage }: PaginationContextState): boolean =>\n    loadingNewPage,\n  pageNumber: ({ currentPage }: PaginationContextState): number =>\n    currentPage >= 0 ? currentPage : null,\n  done: ({ done }: PaginationContextState) => done,\n  finalPageIndex,\n  onFirstPage: ({ currentPage }: PaginationContextState) => currentPage === 0,\n  onFinalPage: (state: PaginationContextState) => {\n    const { currentPage } = state;\n    const finalIndex = finalPageIndex(state);\n\n    if (typeof finalIndex !== 'number' || typeof currentPage !== 'number') {\n      return false;\n    }\n\n    return currentPage === finalIndex;\n  },\n};\n\nexport type ContextSelectors = typeof contextSelectors;\n","import { EntityId } from '../entity';\n\nexport interface PaginationContextState {\n  // storing entity ids instead of enities allows the programmer\n  // to teardown resources separately from pagination\n  pages: EntityId[][];\n  loadingNewPage: boolean;\n  currentPage: number;\n  done: boolean;\n  progressionCancelled: boolean; // cancels the automatic page progression when a new page is loaded\n}\n\nexport interface PaginationState {\n  contexts: { [contextId: string]: PaginationContextState };\n}\n\nexport const defaultPaginationContextState: PaginationContextState = {\n  pages: [],\n  loadingNewPage: false,\n  currentPage: -1,\n  done: false,\n  progressionCancelled: false,\n};\n\nexport const defaultPaginationState: PaginationState = { contexts: {} };\n","import { combineLatest, Observable, Subscription } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\nimport { AnyEntity, EntityMap } from '../entity';\nimport { PageIterator } from '../iterator/page-iterator';\nimport { PaginationFunction } from '../iterator/pagination-function';\nimport { makeDispatchers, PaginationActionT } from '../store/actions';\nimport { contextSelectors } from '../store/selectors';\nimport {\n  defaultPaginationContextState,\n  PaginationContextState,\n  PaginationState,\n} from '../store/state';\n\n// assumes paginator reducer is plugged in\n\n/**\n * This is a pagination context usable with Redux, ngrx, or\n * any other similar implementations. It writes to, but does\n * not read from the store. It assumes:\n * 1. `dispatch` dispatches an action to the store\n * 2. TODO this library's reducer has been installed\n */\nexport class StorePaginationContext<Entity extends AnyEntity> {\n  private pageIterator: PageIterator<Entity>;\n  private dispatchers: ReturnType<typeof makeDispatchers>;\n  private contextState = defaultPaginationContextState;\n  private contextState$: Observable<PaginationContextState>;\n  private entityMap$: Observable<EntityMap<Entity>>;\n  private subscription: Subscription;\n\n  constructor(\n    // Arbitrary. For now, only use one ReduxLikePaginationContext per contextId\n    contextId: string,\n\n    // For requesting the pages\n    paginationFunction: PaginationFunction<Entity>,\n\n    // Dispatch an action meant for the PaginationReducer\n    dispatch: (action: PaginationActionT) => void,\n\n    // Allow the programmer to store entities as they like\n    private onReceivePage: (entities: Entity[]) => void,\n\n    state$: Observable<PaginationState>,\n    entityMap$: Observable<EntityMap<Entity>>,\n  ) {\n    this.contextState$ = state$.pipe(\n      map(state =>\n        state ? state.contexts[contextId] : defaultPaginationContextState,\n      ),\n    );\n\n    this.subscription = this.contextState$.subscribe(contextState => {\n      this.contextState = contextState;\n    });\n\n    this.dispatchers = makeDispatchers(contextId, dispatch);\n    this.dispatchers.ResetPaginationState();\n    this.pageIterator = new PageIterator(paginationFunction);\n\n    this.entityMap$ = entityMap$.pipe(shareReplay(1));\n\n    // wait until next event loop in case of setup time\n    setTimeout(() => this.nextPage(), 0);\n  }\n\n  async getNextPageP(): Promise<Entity[]> {\n    const nextPageLoaded = contextSelectors.nextPageLoaded(this.contextState);\n    if (nextPageLoaded) {\n      this.incrementCurrentPage();\n      return;\n    }\n\n    if (contextSelectors.done(this.contextState)) {\n      throw new Error('Cannot get more pages after becoming done');\n    }\n\n    this.dispatchers.GetNextPage();\n    const page = await this.pageIterator.getNextPage();\n    this.onReceivePage(page);\n\n    if (!page) {\n      throw new Error('bad page in getNextPageP');\n    }\n\n    const entityIds = page.map(({ id }) => id);\n\n    if (!entityIds.length) {\n      this.dispatchers.GetNextPageEmpty();\n    } else {\n      this.dispatchers.GetNextPageSuccess(\n        entityIds,\n        this.pageIterator.done,\n      );\n    }\n\n    return page;\n  }\n\n  nextPage() {\n    this.getNextPageP();\n  }\n\n  prevPage() {\n    if (this.contextState.currentPage <= 0) {\n      throw new Error('Cannot go back from page 0');\n    }\n    this.dispatchers.PrevPage();\n  }\n\n  private incrementCurrentPage() {\n    this.dispatchers.NextPage();\n  }\n\n  get currentPage$(): Observable<Entity[] | null> {\n    return combineLatest(this.entityMap$, this.contextState$).pipe(\n      map(([entityMap, contextState]) => {\n        const currentPageIds = contextSelectors.currentPageIds(contextState);\n        if (!currentPageIds) {\n          return null;\n        }\n        return currentPageIds.map(entityId => entityMap[entityId]);\n      }),\n    );\n  }\n\n  destroy() {\n    this.subscription.unsubscribe();\n  }\n\n  [Symbol.asyncIterator] = () => this.pageIterator[Symbol.asyncIterator];\n}\n","import { Dictionary } from '@ngrx/entity';\nimport {\n  createFeatureSelector,\n  createSelector,\n  select,\n  Selector,\n  Store,\n} from '@ngrx/store';\nimport { Observable } from 'rxjs';\nimport { ContextSelectors, contextSelectors } from '../../store/selectors';\nimport { PaginationContextState, PaginationState } from '../../store/state';\nimport { defaultStoreKey } from './default-store-key';\n\n// These selections require knowledge of the entity cache\ninterface AdvancedSelections<Entity> {\n  page: Entity[] | null;\n  all: Entity[] | null;\n}\n\nexport type BasicNgrxPaginationSelectors = {\n  [K in keyof ContextSelectors]: Selector<any, ReturnType<ContextSelectors[K]>>;\n};\n\ntype AdvancedNgrxPaginationSelectors<Entity> = {\n  [K in keyof AdvancedSelections<Entity>]: Selector<\n    any,\n    AdvancedSelections<Entity>[K]\n  >;\n};\n\nexport type AllNgrxPaginationSelectors<Entity> = BasicNgrxPaginationSelectors &\n  AdvancedNgrxPaginationSelectors<Entity>;\n\nexport type BasicNgrxPaginationObservables = {\n  [K in keyof ContextSelectors]: Observable<ReturnType<ContextSelectors[K]>>;\n};\n\ntype AdvancedNgrxPaginationObservables<Entity> = {\n  [K in keyof AdvancedSelections<Entity>]: Observable<\n    AdvancedSelections<Entity>[K]\n  >;\n};\n\nexport type AllNgrxPaginationObservables<\n  Entity\n> = BasicNgrxPaginationObservables & AdvancedNgrxPaginationObservables<Entity>;\n\nconst mapValues = <A>(obj: any, f: any): { [K in keyof A]: any } => {\n  const result = {};\n\n  for (const k of Object.keys(obj)) {\n    result[k] = f(obj[k]);\n  }\n\n  return result as any;\n};\n\n/**\n * Creates pagination selectors that only know about the pagination state\n */\nconst basicPaginationSelectors = (\n  contextId: string,\n): BasicNgrxPaginationSelectors => {\n  const paginationState = createFeatureSelector<PaginationState>(\n    defaultStoreKey,\n  );\n  const contextState = createSelector(\n    paginationState,\n    s => s.contexts[contextId],\n  );\n\n  const contextSelector = <A>(f: (s: PaginationContextState) => A) =>\n    createSelector(contextState, f);\n\n  return mapValues(contextSelectors, contextSelector);\n};\n\n/**\n * Creates selectors that know about the entity cache\n */\nconst advancedPaginationSelectors = <Entity>(\n  basicPaginationSelectors: BasicNgrxPaginationSelectors,\n  selectEntityMap: Selector<any, Dictionary<Entity>>,\n): AdvancedNgrxPaginationSelectors<Entity> => {\n  return {\n    page: createSelector(\n      basicPaginationSelectors.currentPageIds,\n      selectEntityMap,\n      (ids, entityMap) => {\n        if (!ids || !entityMap) {\n          return null;\n        }\n        return ids.reduce((a, id) => {\n          if (id in entityMap) {\n            a.push(entityMap[id]);\n          }\n          return a;\n        }, []);\n      },\n    ),\n    all: createSelector(\n      basicPaginationSelectors.allIds,\n      selectEntityMap,\n      (allIds, entityMap) => {\n        if (!allIds || !entityMap) {\n          return null;\n        }\n        return allIds.map(id => entityMap[id]);\n      },\n    ),\n  };\n};\n\nexport const allPaginationSelectors = <Entity>(\n  contextId: string,\n  selectEntityMap: Selector<any, Dictionary<Entity>>,\n) => {\n  const basicSelectors = basicPaginationSelectors(contextId);\n  const advancedSelectors = advancedPaginationSelectors(\n    basicSelectors,\n    selectEntityMap,\n  );\n  return {\n    ...basicSelectors,\n    ...advancedSelectors,\n  };\n};\n\nexport const allPaginationObservables = <Entity>(\n  store: Store<any>,\n  allSelectors: AllNgrxPaginationSelectors<Entity>,\n): AllNgrxPaginationObservables<Entity> => {\n  const sel = <A>(selector: Selector<any, A>) => store.pipe(select(selector));\n  return mapValues(allSelectors, sel);\n};\n","import { EntityCollectionServiceBase, EntityOp } from '@ngrx/data';\nimport { Action, select, Store } from '@ngrx/store';\nimport { from, Observable } from 'rxjs';\nimport { filter, take } from 'rxjs/operators';\nimport { AnyEntity } from '../../entity';\nimport {\n  ObservablePaginationFunction,\n  observableToPromisePaginationFunction,\n} from '../../iterator/pagination-function';\nimport { PaginationState } from '../../store/state';\nimport { StorePaginationContext } from '../store-pagination-context';\nimport {\n  AllNgrxPaginationObservables,\n  AllNgrxPaginationSelectors,\n  allPaginationObservables,\n  allPaginationSelectors,\n} from './selectors';\n\n/**\n * Adapts `StorePaginationContext` to work with ngrx/data\n */\nexport class Pagination<Entity extends AnyEntity, NextPageState = any> {\n  private storePaginationContext: StorePaginationContext<Entity>;\n  public selectors: AllNgrxPaginationSelectors<Entity>;\n  public selectors$: AllNgrxPaginationObservables<Entity>;\n\n  constructor(\n    contextId: string,\n    paginationFunction: ObservablePaginationFunction<Entity, NextPageState>,\n    private entityService: EntityCollectionServiceBase<Entity, any>,\n    store: Store<any>,\n    ngrxDataPaginationStoreKey: string,\n    addToCache: boolean,\n  ) {\n    const dispatch = (action: Action) => store.dispatch(action);\n\n    const onReceivePage = (page: Entity[]): void => {\n      if (!addToCache) {\n        return;\n      }\n      this.entityService.upsertManyInCache(page);\n      this.entityService.createAndDispatch(EntityOp.SAVE_UPSERT_MANY_SUCCESS, page);\n    };\n\n    const paginationState$ = store.pipe(\n      select(ngrxDataPaginationStoreKey),\n    ) as Observable<PaginationState>;\n\n    const entityMap$ = entityService.selectors$.entityMap$;\n\n    this.storePaginationContext = new StorePaginationContext(\n      contextId,\n      observableToPromisePaginationFunction(paginationFunction),\n      dispatch,\n      onReceivePage,\n      paginationState$,\n      entityMap$,\n    );\n\n    this.selectors = allPaginationSelectors(\n      contextId,\n      entityService.selectors.selectEntityMap,\n    );\n    this.selectors$ = allPaginationObservables(store, this.selectors);\n  }\n\n  nextPage(): void {\n    return this.storePaginationContext.nextPage();\n  }\n\n  prevPage(): void {\n    return this.storePaginationContext.prevPage();\n  }\n\n  /** Not yet cancellable! Use with caution. */\n  _loadAllPages(): Observable<unknown> {\n    return from(this._loadAllPagesP()).pipe(take(1));\n  }\n\n  private async _loadAllPagesP() {\n    // wait until not loading\n    await this.selectors$.nextPageLoading\n      .pipe(\n        filter(loading => !loading),\n        take(1),\n      )\n      .toPromise();\n\n    // start the next-page request\n    this.nextPage();\n\n    // wait until not loading, again\n    await this.selectors$.nextPageLoading\n      .pipe(\n        filter(loading => !loading),\n        take(1),\n      )\n      .toPromise();\n\n    const done = await this.selectors$.done\n      .pipe(take(1))\n      .toPromise();\n\n    if (done) {\n      // done case: let the whole function return\n      return;\n    }\n\n    // recursive case: not done, so recurse\n    return this._loadAllPages();\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { EntityCollectionServiceBase } from '@ngrx/data';\nimport { Store } from '@ngrx/store';\nimport { AnyEntity } from '../../entity';\nimport { ObservablePaginationFunction } from '../../iterator/pagination-function';\nimport { defaultStoreKey } from './default-store-key';\nimport { Pagination } from './pagination';\n\nexport interface PaginationFactoryArgs<\n  Entity extends AnyEntity,\n  NextPageState\n> {\n  contextId?: string;\n  paginationFunction: ObservablePaginationFunction<Entity, NextPageState>;\n  entityService: EntityCollectionServiceBase<Entity, any>;\n  addToCache?: boolean;\n}\n\n@Injectable()\nexport class PaginationFactory {\n  private counter = 0;\n\n  constructor(private store: Store<any>) {}\n\n  create<Entity extends AnyEntity, NextPageState>({\n    entityService,\n    paginationFunction,\n    addToCache = true,\n    contextId = `${entityService.entityName}-${this.counter++}`,\n  }: PaginationFactoryArgs<Entity, NextPageState>): Pagination<\n    Entity,\n    NextPageState\n  > {\n    return new Pagination(\n      contextId,\n      paginationFunction,\n      entityService,\n      this.store,\n      defaultStoreKey,\n      addToCache,\n    );\n  }\n}\n","import { PaginationAction, PaginationActionType as T } from './actions';\nimport { contextSelectors } from './selectors';\nimport {\n  defaultPaginationContextState,\n  defaultPaginationState,\n  PaginationContextState,\n  PaginationState,\n} from './state';\n\nexport function paginationContextReducer(\n  state: PaginationContextState = defaultPaginationContextState,\n  action: PaginationAction,\n): PaginationContextState {\n  switch (action.type) {\n    case T.RESET_PAGINATION_STATE:\n      return defaultPaginationContextState;\n\n    case T.GET_NEXT_PAGE:\n      return {\n        ...state,\n        loadingNewPage: true,\n        progressionCancelled: false,\n      };\n\n    case T.GET_NEXT_PAGE_SUCCESS:\n      return {\n        ...state,\n        loadingNewPage: false,\n        pages: [...state.pages, action.entityIds],\n        currentPage: state.progressionCancelled\n          ? state.currentPage\n          : state.currentPage + 1,\n        done: action.done,\n        progressionCancelled: false,\n      };\n\n    case T.GET_NEXT_PAGE_EMPTY:\n      const isFirstFetchedPage = (state.pages.length === 0);\n      return {\n        ...state,\n        loadingNewPage: false,\n        pages: isFirstFetchedPage ? [[]] : [...state.pages],\n        currentPage: state.progressionCancelled && !isFirstFetchedPage\n          ? state.currentPage\n          : state.currentPage + 1,\n        done: true,\n        progressionCancelled: false,\n      };\n\n    case T.PREV_PAGE:\n      return {\n        ...state,\n        currentPage: state.currentPage - 1,\n        // If the next page is loading when the user goes back,\n        // don't progress the page number when the page comes in\n        progressionCancelled: contextSelectors.nextPageLoading(state),\n      };\n\n    case T.NEXT_PAGE:\n      return {\n        ...state,\n        currentPage: state.currentPage + 1,\n      };\n\n    default:\n      return state;\n  }\n}\n\nexport function paginationReducer(\n  state: PaginationState = defaultPaginationState,\n  action: PaginationAction,\n): PaginationState {\n  if (!action || !action.type.startsWith('[mb-Pagination]')) {\n    return state;\n  }\n\n  return {\n    ...state,\n    contexts: {\n      ...state.contexts,\n      [action.contextId]: paginationContextReducer(\n        state.contexts[action.contextId],\n        action,\n      ),\n    },\n  };\n}\n","import {\n  Inject,\n  ModuleWithProviders,\n  NgModule,\n  Optional,\n  SkipSelf,\n} from '@angular/core';\nimport { StoreModule } from '@ngrx/store';\nimport { paginationReducer } from '../../store/reducer';\nimport { defaultStoreKey } from './default-store-key';\nimport { PaginationFactory } from './pagination-factory.service';\n\nconst NGRX_DATA_PAGINATION_STORE_KEY = 'NGRX_DATA_PAGINATION_STORE_KEY';\n\n@NgModule({\n  declarations: [],\n  imports: [StoreModule.forFeature(defaultStoreKey, paginationReducer)],\n  exports: [],\n  providers: [PaginationFactory],\n})\nexport class PaginationModule {\n  constructor(\n    @Optional() @SkipSelf() parentModule: PaginationModule,\n    @Optional() @Inject(NGRX_DATA_PAGINATION_STORE_KEY) storeKey: string,\n  ) {\n    if (parentModule) {\n      throw new Error(\n        'PaginationModule is already loaded. Import it in the root module (usually the AppModule) only',\n      );\n    }\n    if (!storeKey) {\n      throw new Error(\n        'ngrx-data-pagination requires PaginationModule.forRoot() to be imported',\n      );\n    }\n  }\n\n  /**\n   * `storeKey` doesn't actually work yet`\n   */\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: PaginationModule,\n      providers: [\n        {\n          provide: NGRX_DATA_PAGINATION_STORE_KEY,\n          useValue: defaultStoreKey,\n        },\n      ],\n    };\n  }\n}\n"],"names":["tslib_1.__values","T"],"mappings":"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"}