(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@ngrx/data'), require('@ngrx/store'), require('rxjs'), require('rxjs/operators'), require('@angular/core')) :
    typeof define === 'function' && define.amd ? define('ngrx-data-pagination', ['exports', '@ngrx/data', '@ngrx/store', 'rxjs', 'rxjs/operators', '@angular/core'], factory) :
    (global = global || self, factory(global['ngrx-data-pagination'] = {}, global.data, global.store, global.rxjs, global.rxjs.operators, global.ng.core));
}(this, (function (exports, data, store, rxjs, operators, core) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var defaultStoreKey = 'ngrxDataPagination';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     * @template Entity, State
     */
    function Page() { }
    if (false) {
        /** @type {?} */
        Page.prototype.state;
        /** @type {?} */
        Page.prototype.data;
        /** @type {?} */
        Page.prototype.done;
    }
    /** @type {?} */
    var observableToPromisePaginationFunction = (/**
     * @template Entity, State
     * @param {?} observableFn
     * @return {?}
     */
    function (observableFn) { return (/**
     * @param {?=} prevState
     * @return {?}
     */
    function (prevState) {
        return observableFn(prevState).toPromise();
    }); });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // TODO fix TS setup for AsyncPageGenerator types
    // export type AsyncPageGenerator<Entity> = AsyncGenerator<Entity[], Entity[], any>;
    /**
     * @template Entity, State
     * @param {?} paginationFunction
     * @return {?}
     */
    function asyncPageGenerator(paginationFunction) {
        return __asyncGenerator(this, arguments, function asyncPageGenerator_1() {
            var page;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        // : AsyncGenerator<Entity[], Entity[], any>
                        page = {
                            data: undefined,
                            state: undefined,
                            done: false,
                        };
                        _a.label = 1;
                    case 1:
                        if (!true) return [3 /*break*/, 7];
                        return [4 /*yield*/, __await(paginationFunction(page.state))];
                    case 2:
                        page = _a.sent();
                        if (!page.done) return [3 /*break*/, 4];
                        return [4 /*yield*/, __await(page.data)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4: return [4 /*yield*/, __await(page.data)];
                    case 5: return [4 /*yield*/, _a.sent()];
                    case 6:
                        _a.sent();
                        return [3 /*break*/, 1];
                    case 7: return [2 /*return*/];
                }
            });
        });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @template Entity
     */
    var /**
     * @template Entity
     */
    PageIterator = /** @class */ (function () {
        function PageIterator(paginationFunction) {
            var _this = this;
            //  AsyncPageGenerator<Entity>;
            this.done = false;
            this.pending = false;
            this[Symbol.asyncIterator] = (/**
             * @return {?}
             */
            function () { return _this.asyncPageGenerator; });
            this.asyncPageGenerator = asyncPageGenerator(paginationFunction);
        }
        /**
         * @return {?}
         */
        PageIterator.prototype.getNextPage = /**
         * @return {?}
         */
        function () {
            return __awaiter(this, void 0, void 0, function () {
                var _a, value, done;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            if (this.pending) {
                                throw new Error('cannot queue pages (yet)');
                            }
                            if (this.done) {
                                throw new Error('This PageIterator is done. Try creating a new one');
                            }
                            this.pending = true;
                            return [4 /*yield*/, this.asyncPageGenerator.next()];
                        case 1:
                            _a = _b.sent(), value = _a.value, done = _a.done;
                            this.pending = false;
                            this.done = done;
                            return [2 /*return*/, value];
                    }
                });
            });
        };
        return PageIterator;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        PageIterator.prototype.asyncPageGenerator;
        /** @type {?} */
        PageIterator.prototype.done;
        /**
         * @type {?}
         * @private
         */
        PageIterator.prototype.pending;
        /* Skipping unnamed member:
        [Symbol.asyncIterator] = () => this.asyncPageGenerator;*/
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var PaginationActionType = {
        RESET_PAGINATION_STATE: '[mb-Pagination] Reset Pagination State',
        GET_NEXT_PAGE: '[mb-Pagination] Get Next Page',
        GET_NEXT_PAGE_SUCCESS: '[mb-Pagination] Get Next Page Success',
        GET_NEXT_PAGE_EMPTY: '[mb-Pagination] Get Next Page Empty',
        PREV_PAGE: '[mb-Pagination] Prev Page',
        NEXT_PAGE: '[mb-Pagination] Next Page',
    };
    /** @type {?} */
    var T = PaginationActionType;
    /**
     * @record
     */
    function Action() { }
    if (false) {
        /** @type {?} */
        Action.prototype.type;
    }
    /**
     * @record
     */
    function PaginationActionT() { }
    if (false) {
        /** @type {?} */
        PaginationActionT.prototype.type;
        /** @type {?} */
        PaginationActionT.prototype.contextId;
    }
    var ResetPaginationState = /** @class */ (function () {
        function ResetPaginationState(contextId) {
            this.contextId = contextId;
            this.type = T.RESET_PAGINATION_STATE;
        }
        return ResetPaginationState;
    }());
    if (false) {
        /** @type {?} */
        ResetPaginationState.prototype.type;
        /** @type {?} */
        ResetPaginationState.prototype.contextId;
    }
    var GetNextPage = /** @class */ (function () {
        function GetNextPage(contextId) {
            this.contextId = contextId;
            this.type = T.GET_NEXT_PAGE;
        }
        return GetNextPage;
    }());
    if (false) {
        /** @type {?} */
        GetNextPage.prototype.type;
        /** @type {?} */
        GetNextPage.prototype.contextId;
    }
    var GetNextPageSuccess = /** @class */ (function () {
        function GetNextPageSuccess(contextId, entityIds, done) {
            this.contextId = contextId;
            this.entityIds = entityIds;
            this.done = done;
            this.type = T.GET_NEXT_PAGE_SUCCESS;
        }
        return GetNextPageSuccess;
    }());
    if (false) {
        /** @type {?} */
        GetNextPageSuccess.prototype.type;
        /** @type {?} */
        GetNextPageSuccess.prototype.contextId;
        /** @type {?} */
        GetNextPageSuccess.prototype.entityIds;
        /** @type {?} */
        GetNextPageSuccess.prototype.done;
    }
    var GetNextPageEmpty = /** @class */ (function () {
        function GetNextPageEmpty(contextId) {
            this.contextId = contextId;
            this.type = T.GET_NEXT_PAGE_EMPTY;
        }
        return GetNextPageEmpty;
    }());
    if (false) {
        /** @type {?} */
        GetNextPageEmpty.prototype.type;
        /** @type {?} */
        GetNextPageEmpty.prototype.contextId;
    }
    var PrevPage = /** @class */ (function () {
        function PrevPage(contextId) {
            this.contextId = contextId;
            this.type = T.PREV_PAGE;
        }
        return PrevPage;
    }());
    if (false) {
        /** @type {?} */
        PrevPage.prototype.type;
        /** @type {?} */
        PrevPage.prototype.contextId;
    }
    var NextPage = /** @class */ (function () {
        function NextPage(contextId) {
            this.contextId = contextId;
            this.type = T.NEXT_PAGE;
        }
        return NextPage;
    }());
    if (false) {
        /** @type {?} */
        NextPage.prototype.type;
        /** @type {?} */
        NextPage.prototype.contextId;
    }
    /** @type {?} */
    var makeActionCreators = (/**
     * @param {?} contextId
     * @return {?}
     */
    function (contextId) { return ({
        ResetPaginationState: (/**
         * @return {?}
         */
        function () { return new ResetPaginationState(contextId); }),
        GetNextPage: (/**
         * @return {?}
         */
        function () { return new GetNextPage(contextId); }),
        GetNextPageSuccess: (/**
         * @param {?} entityIds
         * @param {?} done
         * @return {?}
         */
        function (entityIds, done) {
            return new GetNextPageSuccess(contextId, entityIds, done);
        }),
        GetNextPageEmpty: (/**
         * @return {?}
         */
        function () { return new GetNextPageEmpty(contextId); }),
        PrevPage: (/**
         * @return {?}
         */
        function () { return new PrevPage(contextId); }),
        NextPage: (/**
         * @return {?}
         */
        function () { return new NextPage(contextId); }),
    }); });
    /** @type {?} */
    var makeDispatchers = (/**
     * @param {?} contextId
     * @param {?} dispatch
     * @return {?}
     */
    function (contextId, dispatch) {
        /** @type {?} */
        var actionCreators = makeActionCreators(contextId);
        return {
            ResetPaginationState: (/**
             * @return {?}
             */
            function () { return dispatch(actionCreators.ResetPaginationState()); }),
            GetNextPage: (/**
             * @return {?}
             */
            function () { return dispatch(actionCreators.GetNextPage()); }),
            GetNextPageSuccess: (/**
             * @param {?} entityIds
             * @param {?} done
             * @return {?}
             */
            function (entityIds, done) {
                return dispatch(actionCreators.GetNextPageSuccess(entityIds, done));
            }),
            GetNextPageEmpty: (/**
             * @return {?}
             */
            function () { return dispatch(actionCreators.GetNextPageEmpty()); }),
            PrevPage: (/**
             * @return {?}
             */
            function () { return dispatch(actionCreators.PrevPage()); }),
            NextPage: (/**
             * @return {?}
             */
            function () { return dispatch(actionCreators.NextPage()); }),
        };
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var finalPageIndex = (/**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var done = _a.done, pages = _a.pages;
        if (!done || !pages || !pages.length) {
            return null;
        }
        return pages.length - 1;
    });
    var ɵ0 = finalPageIndex;
    /** @type {?} */
    var flatten = (/**
     * @template A
     * @param {?} arrays
     * @return {?}
     */
    function (arrays) { return arrays.reduce((/**
     * @param {?} result
     * @param {?} as
     * @return {?}
     */
    function (result, as) { return result.concat(as); })); });
    var ɵ1 = flatten;
    var ɵ2 = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var pages = _a.pages, currentPage = _a.currentPage;
        return (pages ? pages[currentPage] : null);
    }, ɵ3 = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var pages = _a.pages;
        return flatten(pages);
    }, ɵ4 = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var pages = _a.pages;
        return pages;
    }, ɵ5 = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var pages = _a.pages, currentPage = _a.currentPage;
        return !!pages[currentPage + 1];
    }, ɵ6 = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var pages = _a.pages, currentPage = _a.currentPage, loadingNewPage = _a.loadingNewPage;
        if (!Number.isInteger(currentPage)) {
            return loadingNewPage;
        }
        return !pages[currentPage + 1] && loadingNewPage;
    }, ɵ7 = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var loadingNewPage = _a.loadingNewPage;
        return loadingNewPage;
    }, ɵ8 = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var currentPage = _a.currentPage;
        return currentPage >= 0 ? currentPage : null;
    }, ɵ9 = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var done = _a.done;
        return done;
    }, ɵ10 = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var currentPage = _a.currentPage;
        return currentPage === 0;
    }, ɵ11 = /**
     * @param {?} state
     * @return {?}
     */
    function (state) {
        var currentPage = state.currentPage;
        /** @type {?} */
        var finalIndex = finalPageIndex(state);
        if (typeof finalIndex !== 'number' || typeof currentPage !== 'number') {
            return false;
        }
        return currentPage === finalIndex;
    };
    /** @type {?} */
    var contextSelectors = {
        currentPageIds: (ɵ2),
        allIds: (ɵ3),
        allPageIds: (ɵ4),
        nextPageLoaded: (ɵ5),
        nextPageLoading: (ɵ6),
        loadingNewPage: (ɵ7),
        pageNumber: (ɵ8),
        done: (ɵ9),
        finalPageIndex: finalPageIndex,
        onFirstPage: (ɵ10),
        onFinalPage: (ɵ11),
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function PaginationContextState() { }
    if (false) {
        /** @type {?} */
        PaginationContextState.prototype.pages;
        /** @type {?} */
        PaginationContextState.prototype.loadingNewPage;
        /** @type {?} */
        PaginationContextState.prototype.currentPage;
        /** @type {?} */
        PaginationContextState.prototype.done;
        /** @type {?} */
        PaginationContextState.prototype.progressionCancelled;
    }
    /**
     * @record
     */
    function PaginationState() { }
    if (false) {
        /** @type {?} */
        PaginationState.prototype.contexts;
    }
    /** @type {?} */
    var defaultPaginationContextState = {
        pages: [],
        loadingNewPage: false,
        currentPage: -1,
        done: false,
        progressionCancelled: false,
    };
    /** @type {?} */
    var defaultPaginationState = { contexts: {} };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    // assumes paginator reducer is plugged in
    /**
     * This is a pagination context usable with Redux, ngrx, or
     * any other similar implementations. It writes to, but does
     * not read from the store. It assumes:
     * 1. `dispatch` dispatches an action to the store
     * 2. TODO this library's reducer has been installed
     * @template Entity
     */
    var 
    // assumes paginator reducer is plugged in
    /**
     * This is a pagination context usable with Redux, ngrx, or
     * any other similar implementations. It writes to, but does
     * not read from the store. It assumes:
     * 1. `dispatch` dispatches an action to the store
     * 2. TODO this library's reducer has been installed
     * @template Entity
     */
    StorePaginationContext = /** @class */ (function () {
        function StorePaginationContext(
        // Arbitrary. For now, only use one ReduxLikePaginationContext per contextId
        contextId, 
        // For requesting the pages
        paginationFunction, 
        // Dispatch an action meant for the PaginationReducer
        dispatch, onReceivePage, state$, entityMap$) {
            var _this = this;
            this.onReceivePage = onReceivePage;
            this.contextState = defaultPaginationContextState;
            this[Symbol.asyncIterator] = (/**
             * @return {?}
             */
            function () { return _this.pageIterator[Symbol.asyncIterator]; });
            this.contextState$ = state$.pipe(operators.map((/**
             * @param {?} state
             * @return {?}
             */
            function (state) {
                return state ? state.contexts[contextId] : defaultPaginationContextState;
            })));
            this.subscription = this.contextState$.subscribe((/**
             * @param {?} contextState
             * @return {?}
             */
            function (contextState) {
                _this.contextState = contextState;
            }));
            this.dispatchers = makeDispatchers(contextId, dispatch);
            this.dispatchers.ResetPaginationState();
            this.pageIterator = new PageIterator(paginationFunction);
            this.entityMap$ = entityMap$.pipe(operators.shareReplay(1));
            // wait until next event loop in case of setup time
            setTimeout((/**
             * @return {?}
             */
            function () { return _this.nextPage(); }), 0);
        }
        /**
         * @return {?}
         */
        StorePaginationContext.prototype.getNextPageP = /**
         * @return {?}
         */
        function () {
            return __awaiter(this, void 0, void 0, function () {
                var nextPageLoaded, page, entityIds;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            nextPageLoaded = contextSelectors.nextPageLoaded(this.contextState);
                            if (nextPageLoaded) {
                                this.incrementCurrentPage();
                                return [2 /*return*/];
                            }
                            if (contextSelectors.done(this.contextState)) {
                                throw new Error('Cannot get more pages after becoming done');
                            }
                            this.dispatchers.GetNextPage();
                            return [4 /*yield*/, this.pageIterator.getNextPage()];
                        case 1:
                            page = _a.sent();
                            this.onReceivePage(page);
                            if (!page) {
                                throw new Error('bad page in getNextPageP');
                            }
                            entityIds = page.map((/**
                             * @param {?} __0
                             * @return {?}
                             */
                            function (_a) {
                                var id = _a.id;
                                return id;
                            }));
                            if (!entityIds.length) {
                                this.dispatchers.GetNextPageEmpty();
                            }
                            else {
                                this.dispatchers.GetNextPageSuccess(entityIds, this.pageIterator.done);
                            }
                            return [2 /*return*/, page];
                    }
                });
            });
        };
        /**
         * @return {?}
         */
        StorePaginationContext.prototype.nextPage = /**
         * @return {?}
         */
        function () {
            this.getNextPageP();
        };
        /**
         * @return {?}
         */
        StorePaginationContext.prototype.prevPage = /**
         * @return {?}
         */
        function () {
            if (this.contextState.currentPage <= 0) {
                throw new Error('Cannot go back from page 0');
            }
            this.dispatchers.PrevPage();
        };
        /**
         * @private
         * @return {?}
         */
        StorePaginationContext.prototype.incrementCurrentPage = /**
         * @private
         * @return {?}
         */
        function () {
            this.dispatchers.NextPage();
        };
        Object.defineProperty(StorePaginationContext.prototype, "currentPage$", {
            get: /**
             * @return {?}
             */
            function () {
                return rxjs.combineLatest(this.entityMap$, this.contextState$).pipe(operators.map((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), entityMap = _b[0], contextState = _b[1];
                    /** @type {?} */
                    var currentPageIds = contextSelectors.currentPageIds(contextState);
                    if (!currentPageIds) {
                        return null;
                    }
                    return currentPageIds.map((/**
                     * @param {?} entityId
                     * @return {?}
                     */
                    function (entityId) { return entityMap[entityId]; }));
                })));
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        StorePaginationContext.prototype.destroy = /**
         * @return {?}
         */
        function () {
            this.subscription.unsubscribe();
        };
        return StorePaginationContext;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        StorePaginationContext.prototype.pageIterator;
        /**
         * @type {?}
         * @private
         */
        StorePaginationContext.prototype.dispatchers;
        /**
         * @type {?}
         * @private
         */
        StorePaginationContext.prototype.contextState;
        /**
         * @type {?}
         * @private
         */
        StorePaginationContext.prototype.contextState$;
        /**
         * @type {?}
         * @private
         */
        StorePaginationContext.prototype.entityMap$;
        /**
         * @type {?}
         * @private
         */
        StorePaginationContext.prototype.subscription;
        /* Skipping unnamed member:
        [Symbol.asyncIterator] = () => this.pageIterator[Symbol.asyncIterator];*/
        /**
         * @type {?}
         * @private
         */
        StorePaginationContext.prototype.onReceivePage;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     * @template Entity
     */
    function AdvancedSelections() { }
    if (false) {
        /** @type {?} */
        AdvancedSelections.prototype.page;
        /** @type {?} */
        AdvancedSelections.prototype.all;
    }
    /** @type {?} */
    var mapValues = (/**
     * @template A
     * @param {?} obj
     * @param {?} f
     * @return {?}
     */
    function (obj, f) {
        var e_1, _a;
        /** @type {?} */
        var result = {};
        try {
            for (var _b = __values(Object.keys(obj)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var k = _c.value;
                result[k] = f(obj[k]);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return (/** @type {?} */ (result));
    });
    var ɵ0$1 = mapValues;
    /**
     * Creates pagination selectors that only know about the pagination state
     * @type {?}
     */
    var basicPaginationSelectors = (/**
     * @param {?} contextId
     * @return {?}
     */
    function (contextId) {
        /** @type {?} */
        var paginationState = store.createFeatureSelector(defaultStoreKey);
        /** @type {?} */
        var contextState = store.createSelector(paginationState, (/**
         * @param {?} s
         * @return {?}
         */
        function (s) { return s.contexts[contextId]; }));
        /** @type {?} */
        var contextSelector = (/**
         * @template A
         * @param {?} f
         * @return {?}
         */
        function (f) {
            return store.createSelector(contextState, f);
        });
        return mapValues(contextSelectors, contextSelector);
    });
    var ɵ1$1 = basicPaginationSelectors;
    /**
     * Creates selectors that know about the entity cache
     * @type {?}
     */
    var advancedPaginationSelectors = (/**
     * @template Entity
     * @param {?} basicPaginationSelectors
     * @param {?} selectEntityMap
     * @return {?}
     */
    function (basicPaginationSelectors, selectEntityMap) {
        return {
            page: store.createSelector(basicPaginationSelectors.currentPageIds, selectEntityMap, (/**
             * @param {?} ids
             * @param {?} entityMap
             * @return {?}
             */
            function (ids, entityMap) {
                if (!ids || !entityMap) {
                    return null;
                }
                return ids.reduce((/**
                 * @param {?} a
                 * @param {?} id
                 * @return {?}
                 */
                function (a, id) {
                    if (id in entityMap) {
                        a.push(entityMap[id]);
                    }
                    return a;
                }), []);
            })),
            all: store.createSelector(basicPaginationSelectors.allIds, selectEntityMap, (/**
             * @param {?} allIds
             * @param {?} entityMap
             * @return {?}
             */
            function (allIds, entityMap) {
                if (!allIds || !entityMap) {
                    return null;
                }
                return allIds.map((/**
                 * @param {?} id
                 * @return {?}
                 */
                function (id) { return entityMap[id]; }));
            })),
        };
    });
    var ɵ2$1 = advancedPaginationSelectors;
    /** @type {?} */
    var allPaginationSelectors = (/**
     * @template Entity
     * @param {?} contextId
     * @param {?} selectEntityMap
     * @return {?}
     */
    function (contextId, selectEntityMap) {
        /** @type {?} */
        var basicSelectors = basicPaginationSelectors(contextId);
        /** @type {?} */
        var advancedSelectors = advancedPaginationSelectors(basicSelectors, selectEntityMap);
        return __assign({}, basicSelectors, advancedSelectors);
    });
    /** @type {?} */
    var allPaginationObservables = (/**
     * @template Entity
     * @param {?} store
     * @param {?} allSelectors
     * @return {?}
     */
    function (store$1, allSelectors) {
        /** @type {?} */
        var sel = (/**
         * @template A
         * @param {?} selector
         * @return {?}
         */
        function (selector) { return store$1.pipe(store.select(selector)); });
        return mapValues(allSelectors, sel);
    });

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Adapts `StorePaginationContext` to work with ngrx/data
     * @template Entity, NextPageState
     */
    var   /**
     * Adapts `StorePaginationContext` to work with ngrx/data
     * @template Entity, NextPageState
     */
    Pagination = /** @class */ (function () {
        function Pagination(contextId, paginationFunction, entityService, store$1, ngrxDataPaginationStoreKey, addToCache) {
            var _this = this;
            this.entityService = entityService;
            /** @type {?} */
            var dispatch = (/**
             * @param {?} action
             * @return {?}
             */
            function (action) { return store$1.dispatch(action); });
            /** @type {?} */
            var onReceivePage = (/**
             * @param {?} page
             * @return {?}
             */
            function (page) {
                if (!addToCache) {
                    return;
                }
                _this.entityService.upsertManyInCache(page);
                _this.entityService.createAndDispatch(data.EntityOp.SAVE_UPSERT_MANY_SUCCESS, page);
            });
            /** @type {?} */
            var paginationState$ = (/** @type {?} */ (store$1.pipe(store.select(ngrxDataPaginationStoreKey))));
            /** @type {?} */
            var entityMap$ = entityService.selectors$.entityMap$;
            this.storePaginationContext = new StorePaginationContext(contextId, observableToPromisePaginationFunction(paginationFunction), dispatch, onReceivePage, paginationState$, entityMap$);
            this.selectors = allPaginationSelectors(contextId, entityService.selectors.selectEntityMap);
            this.selectors$ = allPaginationObservables(store$1, this.selectors);
        }
        /**
         * @return {?}
         */
        Pagination.prototype.nextPage = /**
         * @return {?}
         */
        function () {
            return this.storePaginationContext.nextPage();
        };
        /**
         * @return {?}
         */
        Pagination.prototype.prevPage = /**
         * @return {?}
         */
        function () {
            return this.storePaginationContext.prevPage();
        };
        /** Not yet cancellable! Use with caution. */
        /**
         * Not yet cancellable! Use with caution.
         * @return {?}
         */
        Pagination.prototype._loadAllPages = /**
         * Not yet cancellable! Use with caution.
         * @return {?}
         */
        function () {
            return rxjs.from(this._loadAllPagesP()).pipe(operators.take(1));
        };
        /**
         * @private
         * @return {?}
         */
        Pagination.prototype._loadAllPagesP = /**
         * @private
         * @return {?}
         */
        function () {
            return __awaiter(this, void 0, void 0, function () {
                var done;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: 
                        // wait until not loading
                        return [4 /*yield*/, this.selectors$.nextPageLoading
                                .pipe(operators.filter((/**
                             * @param {?} loading
                             * @return {?}
                             */
                            function (loading) { return !loading; })), operators.take(1))
                                .toPromise()];
                        case 1:
                            // wait until not loading
                            _a.sent();
                            // start the next-page request
                            this.nextPage();
                            // wait until not loading, again
                            return [4 /*yield*/, this.selectors$.nextPageLoading
                                    .pipe(operators.filter((/**
                                 * @param {?} loading
                                 * @return {?}
                                 */
                                function (loading) { return !loading; })), operators.take(1))
                                    .toPromise()];
                        case 2:
                            // wait until not loading, again
                            _a.sent();
                            return [4 /*yield*/, this.selectors$.done
                                    .pipe(operators.take(1))
                                    .toPromise()];
                        case 3:
                            done = _a.sent();
                            if (done) {
                                // done case: let the whole function return
                                return [2 /*return*/];
                            }
                            // recursive case: not done, so recurse
                            return [2 /*return*/, this._loadAllPages()];
                    }
                });
            });
        };
        return Pagination;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        Pagination.prototype.storePaginationContext;
        /** @type {?} */
        Pagination.prototype.selectors;
        /** @type {?} */
        Pagination.prototype.selectors$;
        /**
         * @type {?}
         * @private
         */
        Pagination.prototype.entityService;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     * @template Entity, NextPageState
     */
    function PaginationFactoryArgs() { }
    if (false) {
        /** @type {?|undefined} */
        PaginationFactoryArgs.prototype.contextId;
        /** @type {?} */
        PaginationFactoryArgs.prototype.paginationFunction;
        /** @type {?} */
        PaginationFactoryArgs.prototype.entityService;
        /** @type {?|undefined} */
        PaginationFactoryArgs.prototype.addToCache;
    }
    var PaginationFactory = /** @class */ (function () {
        function PaginationFactory(store) {
            this.store = store;
            this.counter = 0;
        }
        /**
         * @template Entity, NextPageState
         * @param {?} __0
         * @return {?}
         */
        PaginationFactory.prototype.create = /**
         * @template Entity, NextPageState
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var entityService = _a.entityService, paginationFunction = _a.paginationFunction, _b = _a.addToCache, addToCache = _b === void 0 ? true : _b, _c = _a.contextId, contextId = _c === void 0 ? entityService.entityName + "-" + this.counter++ : _c;
            return new Pagination(contextId, paginationFunction, entityService, this.store, defaultStoreKey, addToCache);
        };
        PaginationFactory.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        PaginationFactory.ctorParameters = function () { return [
            { type: store.Store }
        ]; };
        return PaginationFactory;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        PaginationFactory.prototype.counter;
        /**
         * @type {?}
         * @private
         */
        PaginationFactory.prototype.store;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function paginationContextReducer(state, action) {
        if (state === void 0) { state = defaultPaginationContextState; }
        switch (action.type) {
            case PaginationActionType.RESET_PAGINATION_STATE:
                return defaultPaginationContextState;
            case PaginationActionType.GET_NEXT_PAGE:
                return __assign({}, state, { loadingNewPage: true, progressionCancelled: false });
            case PaginationActionType.GET_NEXT_PAGE_SUCCESS:
                return __assign({}, state, { loadingNewPage: false, pages: __spread(state.pages, [action.entityIds]), currentPage: state.progressionCancelled
                        ? state.currentPage
                        : state.currentPage + 1, done: action.done, progressionCancelled: false });
            case PaginationActionType.GET_NEXT_PAGE_EMPTY:
                /** @type {?} */
                var isFirstFetchedPage = (state.pages.length === 0);
                return __assign({}, state, { loadingNewPage: false, pages: isFirstFetchedPage ? [[]] : __spread(state.pages), currentPage: state.progressionCancelled && !isFirstFetchedPage
                        ? state.currentPage
                        : state.currentPage + 1, done: true, progressionCancelled: false });
            case PaginationActionType.PREV_PAGE:
                return __assign({}, state, { currentPage: state.currentPage - 1, progressionCancelled: contextSelectors.nextPageLoading(state) });
            case PaginationActionType.NEXT_PAGE:
                return __assign({}, state, { currentPage: state.currentPage + 1 });
            default:
                return state;
        }
    }
    /**
     * @param {?=} state
     * @param {?=} action
     * @return {?}
     */
    function paginationReducer(state, action) {
        var _a;
        if (state === void 0) { state = defaultPaginationState; }
        if (!action || !action.type.startsWith('[mb-Pagination]')) {
            return state;
        }
        return __assign({}, state, { contexts: __assign({}, state.contexts, (_a = {}, _a[action.contextId] = paginationContextReducer(state.contexts[action.contextId], action), _a)) });
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var NGRX_DATA_PAGINATION_STORE_KEY = 'NGRX_DATA_PAGINATION_STORE_KEY';
    var PaginationModule = /** @class */ (function () {
        function PaginationModule(parentModule, storeKey) {
            if (parentModule) {
                throw new Error('PaginationModule is already loaded. Import it in the root module (usually the AppModule) only');
            }
            if (!storeKey) {
                throw new Error('ngrx-data-pagination requires PaginationModule.forRoot() to be imported');
            }
        }
        /**
         * `storeKey` doesn't actually work yet`
         */
        /**
         * `storeKey` doesn't actually work yet`
         * @return {?}
         */
        PaginationModule.forRoot = /**
         * `storeKey` doesn't actually work yet`
         * @return {?}
         */
        function () {
            return {
                ngModule: PaginationModule,
                providers: [
                    {
                        provide: NGRX_DATA_PAGINATION_STORE_KEY,
                        useValue: defaultStoreKey,
                    },
                ],
            };
        };
        PaginationModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [],
                        imports: [store.StoreModule.forFeature(defaultStoreKey, paginationReducer)],
                        exports: [],
                        providers: [PaginationFactory],
                    },] }
        ];
        /** @nocollapse */
        PaginationModule.ctorParameters = function () { return [
            { type: PaginationModule, decorators: [{ type: core.Optional }, { type: core.SkipSelf }] },
            { type: String, decorators: [{ type: core.Optional }, { type: core.Inject, args: [NGRX_DATA_PAGINATION_STORE_KEY,] }] }
        ]; };
        return PaginationModule;
    }());

    exports.NGRX_DATA_PAGINATION_STORE_KEY = defaultStoreKey;
    exports.Pagination = Pagination;
    exports.PaginationFactory = PaginationFactory;
    exports.PaginationModule = PaginationModule;
    exports.paginationReducer = paginationReducer;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngrx-data-pagination.umd.js.map
